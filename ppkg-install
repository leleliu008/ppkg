# Copyright (c) 2021-2023 åˆ˜å¯Œé¢‘
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# https://github.com/leleliu008/ppkg

# If IFS is not set, the deault value will be <space><tab><newline>
# https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_05_03
unset IFS


COLOR_RED='\033[0;31m'          # Red
COLOR_GREEN='\033[0;32m'        # Green
COLOR_YELLOW='\033[0;33m'       # Yellow
COLOR_BLUE='\033[0;94m'         # Blue
COLOR_PURPLE='\033[0;35m'       # Purple
COLOR_OFF='\033[0m'             # Reset

print() {
    printf '%b' "$*"
}

echo() {
    printf '%b\n' "$*"
}

note() {
    printf '%b\n' "${COLOR_YELLOW}ðŸ””  $*${COLOR_OFF}" >&2
}

warn() {
    printf '%b\n' "${COLOR_YELLOW}ðŸ”¥  $*${COLOR_OFF}" >&2
}

success() {
    printf '%b\n' "${COLOR_GREEN}[âœ”] $*${COLOR_OFF}" >&2
}

error() {
    printf '%b\n' "${COLOR_RED}ðŸ’”  $*${COLOR_OFF}" >&2
}

abort() {
    EXIT_STATUS_CODE="$1"
    shift
    printf '%b\n' "${COLOR_RED}ðŸ’”  $*${COLOR_OFF}" >&2
    exit "$EXIT_STATUS_CODE"
}

step() {
    STEP_NUM=$(expr ${STEP_NUM-0} + 1)
    STEP_MESSAGE="$*"
    printf '\n%b\n' "${COLOR_PURPLE}=>> STEP ${STEP_NUM} : ${STEP_MESSAGE} ${COLOR_OFF}"
}

run() {
    if [ "$RUN_SILENT" != yes ] ; then
        echo "${COLOR_PURPLE}==>${COLOR_OFF} ${COLOR_GREEN}$@${COLOR_OFF}"
    fi

    eval "$@"
}

is_integer() {
    case "${1#[+-]}" in
        (*[!0123456789]*) return 1 ;;
        ('')              return 1 ;;
        (*)               return 0 ;;
    esac
}

bppend_to_PATH() {
    case ":${PATH}:" in
        *:"$1":*) ;;
        *) export PATH="$1:$PATH" ;;
    esac
}

bppend_to_ACLOCAL_PATH() {
    case ":${ACLOCAL_PATH}:" in
        *:"$1":*) ;;
        *) export ACLOCAL_PATH="$1:$ACLOCAL_PATH" ;;
    esac
}

sed_in_place() {
    echo "${COLOR_PURPLE}==>${COLOR_OFF} ${COLOR_GREEN}sed -i $@${COLOR_OFF}"
    sed -i "$@"
}

git() {
    if [ -f "$PPKG_CORE_DIR/etc/ssl/certs/cacert.pem" ] ; then
        command git -c http.sslCAInfo="$PPKG_CORE_DIR/etc/ssl/certs/cacert.pem" "$@"
    else
        command git "$@"
    fi
}

# }}}
##############################################################################
# {{{ wfetch

# wfetch <URL> [--uri=URL-MIRROR] [--silent] [--sha256=SHA256] <--output-path=PATH>
# wfetch <URL> [--uri=URL-MIRROR] [--silent] [--sha256=SHA256] <--output-dir=DIR> <--output-name=NAME>
# wfetch <URL> [--uri=URL-MIRROR] [--silent] [--sha256=SHA256] <--output-dir=DIR> [--output-name=NAME]
# wfetch <URL> [--uri=URL-MIRROR] [--silent] [--sha256=SHA256] [--output-dir=DIR] <--output-name=NAME>

# influential environment variable:
# PPKG_URL_TRANSFORM
wfetch() {
    unset FETCH_URL
    unset FETCH_URI
    unset FETCH_SHA256
    unset FETCH_OUTPUT_DIR
    unset FETCH_OUTPUT_NAME
    unset FETCH_OUTPUT_PATH
    unset FETCH_SILENT

    [ -z "$1" ] && abort 1 "wfetch <URL> [OPTION]... , <URL> must be non-empty."

    if [ -z "$PPKG_URL_TRANSFORM" ] ; then
        FETCH_URL="$1"
    else
        FETCH_URL="$("$PPKG_URL_TRANSFORM" "$1")" || return 1
    fi

    shift

    while [ -n "$1" ]
    do
        case $1 in
            --silent)
                FETCH_SILENT=yes
                RUN_SILENT=yes
                ;;
            --sha256=*)
                FETCH_SHA256="${1#*=}"
                ;;
            --uri=*)
                FETCH_URI="${1#*=}"
                if [ -z "$FETCH_URI" ] ; then
                    abort 1 "wfetch <URL> --uri=<URL-MIRROR> , <URL-MIRROR> must be non-empty."
                fi
                if [ -n "$PPKG_URL_TRANSFORM" ] ; then
                    FETCH_URI="$("$PPKG_URL_TRANSFORM" "$FETCH_URI")" || return 1
                fi
                ;;
            --output-dir=*)
                FETCH_OUTPUT_DIR="${1#*=}"
                if [ -z "$FETCH_OUTPUT_DIR" ] ; then
                    abort 1 "wfetch <URL> --output-dir=<DIR> , <DIR> must be non-empty."
                fi
                ;;
            --output-name=*)
                FETCH_OUTPUT_NAME="${1#*=}"
                if [ -z "$FETCH_OUTPUT_NAME" ] ; then
                    abort 1 "wfetch <URL> --output-name=<NAME> , <NAME> must be non-empty."
                fi
                ;;
            --output-path=*)
                FETCH_OUTPUT_PATH="${1#*=}"
                if [ -z "$FETCH_OUTPUT_PATH" ] ; then
                    abort 1 "wfetch <URL> --output-path=<FILEPATH> , <FILEPATH> must be non-empty."
                fi
                ;;
            *)  abort 1 "wfetch <URL> [OPTION]..., unrecognized option: $1

    wfetch command usage:

    wfetch <URL> [--url-mirror=URL2] [--silent] [--sha256=SHA256] <--output-path=PATH>
    wfetch <URL> [--url-mirror=URL2] [--silent] [--sha256=SHA256] <--output-dir=DIR> <--output-name=NAME>
    wfetch <URL> [--url-mirror=URL2] [--silent] [--sha256=SHA256] <--output-dir=DIR> [--output-name=NAME]
    wfetch <URL> [--url-mirror=URL2] [--silent] [--sha256=SHA256] [--output-dir=DIR] <--output-name=NAME>"
        esac
        shift
    done

    if [ -z "$FETCH_URI" ] ; then
        FETCH_URI="$FETCH_URL"
    fi

    if [ -z "$FETCH_OUTPUT_PATH" ] ; then
        if [ -z "$FETCH_OUTPUT_DIR" ] && [ -z "$FETCH_OUTPUT_NAME" ] ; then
            FETCH_OUTPUT_PATH='-'
        else
            if [ -z "$FETCH_OUTPUT_DIR" ] ; then
                FETCH_OUTPUT_DIR="$PWD"
            fi

            if [ -z "$FETCH_OUTPUT_NAME" ] ; then
                FETCH_OUTPUT_NAME=$(basename "$FETCH_URL")
            fi

            FETCH_OUTPUT_PATH="$FETCH_OUTPUT_DIR/$FETCH_OUTPUT_NAME"

            if [ !          -d "$FETCH_OUTPUT_DIR" ] ; then
                run install -d "$FETCH_OUTPUT_DIR" || return 1
            fi
        fi
    elif [ "$FETCH_OUTPUT_PATH" = '-' ] ; then
        unset FETCH_OUTPUT_DIR
        unset FETCH_OUTPUT_NAME
    else
        FETCH_OUTPUT_DIR="$(dirname "$FETCH_OUTPUT_PATH")"
        FETCH_OUTPUT_NAME="$(basename "$FETCH_OUTPUT_PATH")"
        if [ !          -d "$FETCH_OUTPUT_DIR" ] ; then
            run install -d "$FETCH_OUTPUT_DIR" || return 1
        fi
    fi

    case $FETCH_URL in
        *.git)
            if [    -d "$FETCH_OUTPUT_PATH" ] ; then
                run cd "$FETCH_OUTPUT_PATH" || return 1
                if      git rev-parse HEAD > /dev/null 2>&1 ; then
                    run git pull || return 1
                    run git submodule update --recursive || return 1
                else
                    run cd .. || return 1
                    run rm -rf "$FETCH_OUTPUT_NAME" || return 1
                    run git clone --recursive "$FETCH_URL" "$FETCH_OUTPUT_NAME" || return 1
                fi
            else
                if [ !          -d "$FETCH_OUTPUT_DIR" ] ; then
                    run install -d "$FETCH_OUTPUT_DIR" || return 1
                fi
                run cd "$FETCH_OUTPUT_DIR" || return 1
                run git clone --recursive "$FETCH_URL" "$FETCH_OUTPUT_NAME" || return 1
            fi
            ;;
        *)
            if [ "$FETCH_OUTPUT_PATH" != '-' ] && [ -f "$FETCH_OUTPUT_PATH" ] ; then
                if [ -n "$FETCH_SHA256" ] ; then
                    if [ "$(sha256sum "$FETCH_OUTPUT_PATH" | cut -d ' ' -f1)" = "$FETCH_SHA256" ] ; then
                        success "$FETCH_OUTPUT_PATH already have been fetched."
                        return 0
                    fi
                fi
                rm -f "$FETCH_OUTPUT_PATH" || return 1
            fi

            for FETCH_TOOL in curl wget http lynx aria2c axel
            do
                if command -v "$FETCH_TOOL" > /dev/null ; then
                    break
                else
                    unset FETCH_TOOL
                fi
            done

            if [ -z "$FETCH_TOOL" ] ; then
                abort 1 "no fetch tool found, please install one of curl wget http lynx aria2c axel, then try again."
            fi

            case $FETCH_TOOL in
                curl)
                    unset FETCH_TOOL_CURL_EXTRA_OPTIONS

                    if [ "$FETCH_SILENT" = yes ] ; then
                        FETCH_TOOL_CURL_OPTIONS='--no-progress-meter'
                    fi

                    if [ -f "$PPKG_CORE_DIR/etc/ssl/certs/cacert.pem" ] ; then
                        FETCH_TOOL_CURL_OPTIONS="--cacert $PPKG_CORE_DIR/etc/ssl/certs/cacert.pem"
                    fi

                    run "curl $FETCH_TOOL_CURL_OPTIONS --fail --retry 20 --retry-delay 30 --location -o '$FETCH_OUTPUT_PATH' '$FETCH_URL'" ||
                    run "curl $FETCH_TOOL_CURL_OPTIONS --fail --retry 20 --retry-delay 30 --location -o '$FETCH_OUTPUT_PATH' '$FETCH_URI'"
                    ;;
                wget)
                    run "wget --timeout=60 -O '$FETCH_OUTPUT_PATH' '$FETCH_URL'" ||
                    run "wget --timeout=60 -O '$FETCH_OUTPUT_PATH' '$FETCH_URI'"
                    ;;
                http)
                    run "http --timeout=60 -o '$FETCH_OUTPUT_PATH' '$FETCH_URL'" ||
                    run "http --timeout=60 -o '$FETCH_OUTPUT_PATH' '$FETCH_URI'"
                    ;;
                lynx)
                    run "lynx -source '$FETCH_URL' > '$FETCH_OUTPUT_PATH'" ||
                    run "lynx -source '$FETCH_URI' > '$FETCH_OUTPUT_PATH'"
                    ;;
                aria2c)
                    run "aria2c -d '$FETCH_OUTPUT_DIR' -o '$FETCH_OUTPUT_NAME' '$FETCH_URL'" ||
                    run "aria2c -d '$FETCH_OUTPUT_DIR' -o '$FETCH_OUTPUT_NAME' '$FETCH_URI'"
                    ;;
                axel)
                    run "axel -o '$FETCH_OUTPUT_PATH' '$FETCH_URL'" ||
                    run "axel -o '$FETCH_OUTPUT_PATH' '$FETCH_URI'"
                    ;;
                *)  abort 1 "wfetch() unimplementation: $FETCH_TOOL"
                    ;;
            esac

            [ $? -eq 0 ] || return 1

            if [ "$FETCH_OUTPUT_PATH" != '-' ] && [ -n "$FETCH_SHA256" ] ; then
                [ "$(sha256sum "$FETCH_OUTPUT_PATH" | cut -d ' ' -f1)" = "$FETCH_SHA256" ] || {
                    abort 1 "sha256sum mismatch.\n    expect : $FETCH_SHA256\n    actual : $(sha256sum "$FETCH_OUTPUT_PATH" | cut -d ' ' -f1)"
                }
            fi
    esac
}

# }}}
##############################################################################
# {{{ version

version_sort() {
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sort.html
    # https://man.netbsd.org/NetBSD-8.1/i386/sort.1
    #
    # sort: unrecognized option: V
    # BusyBox v1.29.3 (2019-01-24 07:45:07 UTC) multi-call binary.
    # Usage: sort [-nrugMcszbdfiokt] [-o FILE] [-k start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...
    if  printf '\n' | (sort -V > /dev/null 2>&1) ; then
        printf '%s\n' "$*" | tr ' ' '\n' | sort -V
    else
        printf '%s\n' "$*" | tr ' ' '\n' | sort -t. -n -k1,1 -k2,2 -k3,3 -k4,4
    fi
}

# check if match the condition
#
# condition:
# eq  equal
# ne  not equal
# gt  greater than
# lt  less than
# ge  greater than or equal
# le  less than or equal
#
# examples:
# version_match 1.15.3 eq 1.16.0
# version_match 1.15.3 lt 1.16.0
# version_match 1.15.3 gt 1.16.0
# version_match 1.15.3 le 1.16.0
# version_match 1.15.3 ge 1.16.0
version_match() {
    case $2 in
        eq)  [ "$1"  = "$3" ] ;;
        ne)  [ "$1" != "$3" ] ;;
        le)
            if [ "$1" = "$3" ] ; then
                return 0
            fi
            [ "$1" = "$(version_sort "$1" "$3" | head -n 1)" ]
            ;;
        ge)
            if [ "$1" = "$3" ] ; then
                return 0
            fi
            [ "$1" = "$(version_sort "$1" "$3" | tail -n 1)" ]
            ;;
        lt)
            if [ "$1" = "$3" ] ; then
                return 1
            fi
            [ "$1" = "$(version_sort "$1" "$3" | head -n 1)" ]
            ;;
        gt)
            if [ "$1" = "$3" ] ; then
                return 1
            fi
            [ "$1" = "$(version_sort "$1" "$3" | tail -n 1)" ]
            ;;
        *)  abort 1 "version_compare: $2: not supported operator."
    esac
}

package_name_transform_from_uppm_to_brew() {
    case $1 in
        gm4)      printf '%s\n' 'm4'        ;;
        file)     printf '%s\n' 'file-formula' ;;
        xattr)    printf '%s\n' 'attr'      ;;
        patch)    printf '%s\n' 'gpatch'    ;;
        delta)    printf '%s\n' 'git-delta' ;;
        gmake)    printf '%s\n' 'make'      ;;
        gtar)     printf '%s\n' 'gnu-tar'   ;;
        libjxl)   printf '%s\n' 'jpeg-xl'   ;;
        blake3)   printf '%s\n' 'b3sum'     ;;
        libwebp)  printf '%s\n' 'webp'      ;;
        proj7)    printf '%s\n' 'proj@7'    ;;
        openssl)  printf '%s\n' 'openssl@1.1';;
        freetype2)printf '%s\n' 'freetype'  ;;
        freetype2-with-harfbuzz)
                  printf '%s\n' 'freetype'  ;;
        libmediainfo|mediainfo)
                  printf '%s\n' 'media-info';;
        tcl-core) printf '%s\n' 'tcl-tk'    ;;
        openssl1.1.x)
                  printf '%s\n' 'openssl@1.1';;
        gnu-binutils)
                  printf '%s\n' 'binutils'  ;;
        *)        printf '%s\n' "$1"
    esac
}

__install_the_given_package() {
    step "locate C/C++ toolchain"

    unset CC
    unset CXX
    unset CPP
    unset AS
    unset AR
    unset RANLIB
    unset LD
    unset NM
    unset SIZE
    unset STRIP
    unset STRINGS
    unset OBJDUMP
    unset OBJCOPY
    unset READELF
    unset ADDR2LINE

    if [ "$NATIVE_OS_KIND" = 'darwin' ] ; then
             CC="$(xcrun --sdk macosx --find clang)"
            CXX="$(xcrun --sdk macosx --find clang++)"
             AS="$(xcrun --sdk macosx --find as)"
             AR="$(xcrun --sdk macosx --find ar)"
         RANLIB="$(xcrun --sdk macosx --find ranlib)"
             LD="$(xcrun --sdk macosx --find ld)"
             NM="$(xcrun --sdk macosx --find nm)"
           SIZE="$(xcrun --sdk macosx --find size)"
          STRIP="$(xcrun --sdk macosx --find strip)"
        STRINGS="$(xcrun --sdk macosx --find strings)"
        OBJDUMP="$(xcrun --sdk macosx --find objdump)"
    else
             CC="$(command -v cc || command -v clang || command -v gcc || error "C Compiler not found.")"
            CXX="$(command -v c++ || command -v clang++ || command -v g++ || error "C++ Compiler not found.")"
             AS="$(command -v as)"
             AR="$(command -v ar)"
         RANLIB="$(command -v ranlib)"
             LD="$(command -v ld)"
             NM="$(command -v nm)"
           SIZE="$(command -v size)"
          STRIP="$(command -v strip)"
        STRINGS="$(command -v strings)"
        OBJDUMP="$(command -v objdump)"
        OBJCOPY="$(command -v objcopy)"
        READELF="$(command -v readelf)"
        ADDR2LINE="$(command -v addr2line || true)"
    fi

    CPP="$CC -E"

    for TOOL in CC CXX CPP AS AR RANLIB LD NM STRIP SIZE STRINGS OBJDUMP OBJCOPY READELF ADDR2LINE
    do
        printf "%9s = %s\n" "$TOOL" "$(eval echo \$"$TOOL")"
    done

    export CC
    export CXX
    export CPP
    export AS
    export AR
    export RANLIB
    export LD
    export NM
    export SIZE
    export STRIP
    export STRINGS
    export OBJDUMP
    export OBJCOPY
    export READELF
    export ADDR2LINE

    #########################################################################################

    # https://keith.github.io/xcode-man-pages/xcrun.1.html
    # https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_SYSROOT.html
    unset SDKROOT
    unset SYSROOT

    #########################################################################################

    step "initialize CFLAGS CXXFLAGS CPPFLAGS LDFLAGS"

    if [ "$NATIVE_OS_KIND" = 'darwin' ] ; then
        SYSROOT="$(xcrun --sdk macosx --show-sdk-path)"

        PPFLAGS="-isysroot $SYSROOT -Qunused-arguments"
        CCFLAGS="-isysroot $SYSROOT -Qunused-arguments -fPIC -fno-common"
        XXFLAGS="-isysroot $SYSROOT -Qunused-arguments -fPIC -fno-common"
        LDFLAGS="-isysroot $SYSROOT -Wl,-search_paths_first"
    else
        PPFLAGS=
        CCFLAGS="-fPIC -fno-common"
        XXFLAGS="-fPIC -fno-common"
        # https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html
        LDFLAGS="-Wl,--as-needed -Wl,-z,muldefs -Wl,--allow-multiple-definition"
    fi

    if [ "$LOG_LEVEL" -ge 3 ] ; then
        CCFLAGS="$CCFLAGS -v"
        XXFLAGS="$XXFLAGS -v"
        LDFLAGS="$LDFLAGS -Wl,-v"
    fi

    if [ "$BUILD_TYPE" = release ] ; then
        PPFLAGS="$PPFLAGS -DNDEBUG"
        CCFLAGS="$CCFLAGS -Os"
        XXFLAGS="$XXFLAGS -Os"
        LDFLAGS="$LDFLAGS -Wl,-S"
    fi

    case $NATIVE_OS_KIND in
        netbsd)  LDFLAGS="$LDFLAGS -pthread" ;;
        openbsd) LDFLAGS="$LDFLAGS -pthread" ;;
    esac

    #########################################################################################

    step "check if C compiler supports -Wno-error=unused-command-line-argument option"

    cat > test.c <<EOF
int main() {
    return 0;
}
EOF

    if [ -z "$SYSROOT" ] ; then
        TEST_CCFLAGS='-Wno-error=unused-command-line-argument'
    else
        TEST_CCFLAGS="-Wno-error=unused-command-line-argument -isysroot $SYSROOT"
    fi

    if $CC $TEST_CCFLAGS test.c 2>/dev/null ; then
        CCFLAGS="$CCFLAGS -Wno-error=unused-command-line-argument"
        success "YES"
    else
        error "NO"
    fi

    #########################################################################################

    step "check if C++ compiler supports -Wno-error=unused-command-line-argument option"

    cat > test.cc <<EOF
int main() {
    return 0;
}
EOF

    if [ -z "$SYSROOT" ] ; then
        TEST_XXFLAGS='-Wno-error=unused-command-line-argument'
    else
        TEST_XXFLAGS="-Wno-error=unused-command-line-argument -isysroot $SYSROOT"
    fi

    if $CXX $TEST_XXFLAGS test.cc 2>/dev/null ; then
        XXFLAGS="$XXFLAGS -Wno-error=unused-command-line-argument"
        success "YES"
    else
        error "NO"
    fi

    ##################################################################################

    export   CFLAGS="$CCFLAGS"
    export CXXFLAGS="$XXFLAGS"
    export CPPFLAGS="$PPFLAGS"
    export  LDFLAGS="$LDFLAGS"

    ##################################################################################

    step "create proxy for C/C++ compiler"

    cat > proxy-cc.c <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

int main(int argc, char * argv[]) {
    char * PROXIED_PROGRAM = NULL;

    if (argv[0][strlen(argv[0]) - 1] == '+') {
        PROXIED_PROGRAM = getenv("PROXIED_CXX");

        if (PROXIED_PROGRAM == NULL) {
            fprintf(stderr, "PROXIED_CXX environment variable is not set.\n");
            return 2;
        }
    } else {
        PROXIED_PROGRAM = getenv("PROXIED_CC");

        if (PROXIED_PROGRAM == NULL) {
            fprintf(stderr, "PROXIED_CC environment variable is not set.\n");
            return 2;
        }
    }

    if (argc > 1) {
        const char * options[5] = { "-shared", "-static", "--static", "-Wl,-Bdynamic", "-pie" };
              int    indexes[5] = {    -1,         -1,        -1,            -1,         -1   };

        for (int i = 1; i < argc; i++) {
            for (int j = 0; j < 5; j++) {
                if (strcmp(argv[i], options[j]) == 0) {
                    indexes[j] = i;
                }

                if (indexes[0] > 0) {
                    if ((indexes[1] > 0) && (indexes[2] > 0) && (indexes[4] > 0)) {
                        goto lable;
                    }
                }
            }
        }

        lable:
        // printf("      -shared = %d\n", indexes[0]);
        // printf("      -static = %d\n", indexes[1]);
        // printf("     --static = %d\n", indexes[2]);
        // printf("-Wl,-Bdynamic = %d\n", indexes[3]);
        // printf("         -pie = %d\n", indexes[4]);

        // if -shared option is passed, then remove -static , --static , -pie options if they also are passed
        if (indexes[0] > 0) {
            if (indexes[1] > 0) {
                argv[indexes[1]] = (char*)"-shared";
            }
            if (indexes[2] > 0) {
                argv[indexes[2]] = (char*)"-shared";
            }
            if (indexes[4] > 0) {
                argv[indexes[4]] = (char*)"-shared";
            }
        } else {
            // if -shared option is not passed, but -static or --static option is passed, then remove -pie , -Wl,-Bdynamic option if it also is passed
            if ((indexes[1] > 0) || (indexes[2] > 0)) {
                if (indexes[3] > 0) {
                    argv[indexes[3]] = (char*)"-static";
                }
                if (indexes[4] > 0) {
                    argv[indexes[4]] = (char*)"-static";
                }
            }
        }
    }

    argv[0] = PROXIED_PROGRAM;

    // for (int i = 0; argv[i] != NULL; i++) {
    //     printf("%s ", argv[i]);
    // }
    // printf("\n");

    execv (PROXIED_PROGRAM, argv);
    perror(PROXIED_PROGRAM);
    return -1;
}
EOF

    PROXY_CC="$PPKG_CORE_BIN_DIR/proxy-cc"
    PROXY_CXX="$PPKG_CORE_BIN_DIR/proxy-c++"

    if [ -z "$SYSROOT" ] ; then
        TMP_CCFLAGS='-std=c99'
    else
        TMP_CCFLAGS="-std=c99 -isysroot $SYSROOT"
    fi

    run $CC $TMP_CCFLAGS -o "$PROXY_CC" proxy-cc.c

    run ln -sfr "$PROXY_CC" "$PROXY_CXX"

    export PROXIED_CC="$CC"
    export PROXIED_CXX="$CXX"

    export CC="$PROXY_CC"
    export CXX="$PROXY_CXX"

cat <<EOF
PROXIED_CC  = $PROXIED_CC
PROXIED_CXX = $PROXIED_CXX

        CC  = $CC
        CXX = $CXX
EOF

    #########################################################################################

    unset RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS

    [ -n "$PACKAGE_DEP_PKG" ] && {
        for DEPENDENT_PACKAGE_NAME in $RECURSIVE_DEPENDENT_PACKAGE_NAMES
        do
            DEPENDENT_PACKAGE_INSTALL_DIR="$PPKG_PACKAGE_INSTALLED_ROOT/$DEPENDENT_PACKAGE_NAME"

            if [ -z "$RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS" ] ; then
                RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS="$DEPENDENT_PACKAGE_INSTALL_DIR"
            else
                RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS="$RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS $DEPENDENT_PACKAGE_INSTALL_DIR"
            fi

            DEPENDENT_PACKAGE_BINARY__DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/bin"

            if [ -d  "$DEPENDENT_PACKAGE_BINARY__DIR" ] ; then
                PATH="$DEPENDENT_PACKAGE_BINARY__DIR:$PATH"
            fi

            DEPENDENT_PACKAGE_BINARY__DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/sbin"

            if [ -d  "$DEPENDENT_PACKAGE_BINARY__DIR" ] ; then
                PATH="$DEPENDENT_PACKAGE_BINARY__DIR:$PATH"
            fi

            if [ "$DEPENDENT_PACKAGE_NAME" = docbook ] ; then
                # http://xmlsoft.org/xslt/xsltproc.html
                export XML_CATALOG_FILES="$DEPENDENT_PACKAGE_INSTALL_DIR/catalog.xml"
                printf '%s\n' "XML_CATALOG_FILES=$XML_CATALOG_FILES"
            fi
        done
    }

    #########################################################################################

    [ -n "$PACKAGE_DEP_PKG" ] && {
        step "generate  dependency tree of $1"

        PACKAGE_DEPENDENCY_GRAPH_FILEPATH_DOT="$PACKAGE_WORKING_DIR/dependencies.dot"
        PACKAGE_DEPENDENCY_GRAPH_FILEPATH_BOX="$PACKAGE_WORKING_DIR/dependencies.box"

        run "$PPKG" depends "$PACKAGE_NAME" -t dot -o "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_DOT"
        run "$PPKG" depends "$PACKAGE_NAME" -t box -o "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_BOX"

        if command -v dot > /dev/null ; then
            run "$PPKG" depends "$PACKAGE_NAME" -t svg -o "$PACKAGE_WORKING_DIR/dependencies.svg" || true
            run "$PPKG" depends "$PACKAGE_NAME" -t dot -o "$PACKAGE_WORKING_DIR/dependencies.png" || true
        fi

        if [ -f "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_BOX" ] ; then
            cat "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_BOX"
        else
            cat "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_DOT"
        fi
    }

    #########################################################################################

    PACKAGE_DEP_UPP="${PACKAGE_DEP_UPP#' '}"

    PACKAGE_DEP_UPP_ALL="$PACKAGE_DEP_UPP"

    #########################################################################################

    if [ "$PPKG_USE_EXTERNAL_PACKAGE_MANAGER" = brew ] ; then
        step "install needed packages via brew"

        BREW="$(command -v brew)" || abort 1 "command not found: brew"

        run "$BREW" update
        run "$BREW" --env

        for item in $PACKAGE_DEP_UPP_ALL
        do
            BREW_PACKAGE_NAME=
            BREW_PACKAGE_NAME="$(package_name_transform_from_uppm_to_brew "$item")"

            run "$BREW" install "$BREW_PACKAGE_NAME"

            BREW_PACKAGE_INSTALLED_DIR=
            BREW_PACKAGE_INSTALLED_DIR="$("$BREW" --prefix "$BREW_PACKAGE_NAME")"

            if [ -d  "$BREW_PACKAGE_INSTALLED_DIR/bin" ] ; then
                PATH="$BREW_PACKAGE_INSTALLED_DIR/bin:$PATH"
            fi

            if [ -d  "$BREW_PACKAGE_INSTALLED_DIR/sbin" ] ; then
                PATH="$BREW_PACKAGE_INSTALLED_DIR/sbin:$PATH"
            fi

            if [ -d  "$BREW_PACKAGE_INSTALLED_DIR/libexec/gnubin" ] ; then
                PATH="$BREW_PACKAGE_INSTALLED_DIR/libexec/gnubin:$PATH"
            fi
        done
    elif [ "$PPKG_USE_EXTERNAL_PACKAGE_MANAGER" = uppm ] ; then
        step "install needed packages via uppm"

        UPPM="$PPKG_CORE_BIN_DIR/uppm"

        run "$UPPM" env
        run "$UPPM" update

        # these packages are not relocatable, we should build them from source locally.
        PACKAGE_USE_PERL=no
        PACKAGE_USE_PYTHON3=no
        PACKAGE_USE_LIBTOOL=no
        PACKAGE_USE_AUTOMAKE=no
        PACKAGE_USE_AUTOCONF=no

        for item in $PACKAGE_DEP_UPP_ALL
        do
            case $item in
                perl)     PACKAGE_DEP_UPP_ALL="$PACKAGE_DEP_UPP_ALL gmake"       ; PACKAGE_USE_PERL=yes ;;
                python3)  PACKAGE_DEP_UPP_ALL="$PACKAGE_DEP_UPP_ALL gmake cmake" ; PACKAGE_USE_PYTHON3=yes  ; PACKAGE_USE_PERL=yes  ;;
                libtool)  PACKAGE_DEP_UPP_ALL="$PACKAGE_DEP_UPP_ALL gmake gm4"   ; PACKAGE_USE_LIBTOOL=yes  ;;
                autoconf) PACKAGE_DEP_UPP_ALL="$PACKAGE_DEP_UPP_ALL gmake"       ; PACKAGE_USE_AUTOCONF=yes ;;
                automake) PACKAGE_DEP_UPP_ALL="$PACKAGE_DEP_UPP_ALL gmake"       ; PACKAGE_USE_AUTOCONF=yes ; PACKAGE_USE_AUTOMAKE=yes ;;
            esac
        done

        for item in $PACKAGE_DEP_UPP_ALL
        do
            case $item in
                perl|python3|libtool|autoconf|automake) continue
            esac

            run "$UPPM" install "$item"

            UPPM_PACKAGE_INSTALLED_DIR="$("$UPPM" info "$item" installed-dir)"

            if [ -d  "$UPPM_PACKAGE_INSTALLED_DIR/bin" ] ; then
                PATH="$UPPM_PACKAGE_INSTALLED_DIR/bin:$PATH"
            fi

            if [ -d  "$UPPM_PACKAGE_INSTALLED_DIR/sbin" ] ; then
                PATH="$UPPM_PACKAGE_INSTALLED_DIR/sbin:$PATH"
            fi

            if [ -d          "$UPPM_PACKAGE_INSTALLED_DIR/share/aclocal" ] ; then
                ACLOCAL_PATH="$UPPM_PACKAGE_INSTALLED_DIR/share/aclocal:$ACLOCAL_PATH"
            fi
        done

        (
            PPFLAGS="$PPFLAGS -I$PPKG_CORE_DIR/include"
            LDFLAGS="$LDFLAGS -L$PPKG_CORE_DIR/lib -Wl,-rpath,$PPKG_CORE_DIR/lib"

            export CPPFLAGS="$PPFLAGS"
            export  LDFLAGS="$LDFLAGS"

            export PKG_CONFIG_PATH="$PPKG_CORE_DIR/lib/pkgconfig"

            unset MACOSX_DEPLOYMENT_TARGET

            GMAKE="$HOME/.uppm/installed/gmake/bin/gmake"
            CMAKE="$HOME/.uppm/installed/cmake/bin/cmake"

            [ "$PACKAGE_USE_PERL" = yes ] && {
                step "install perl"

                SRC_URL='https://cpan.metacpan.org/authors/id/R/RJ/RJBS/perl-5.36.0.tar.xz'
                SRC_SHA='0f386dccbee8e26286404b2cca144e1005be65477979beb9b1ba272d4819bcf0'

                RECEIPT_FILEPATH="$PPKG_CORE_DIR/.perl"

                if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                    note "perl already has been built, skipped."
                else
                    wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                    SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/perl"

                    run install -d "$SRC_DIR"
                    run cd         "$SRC_DIR"

                    run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                    run ./Configure "-Dprefix=$PPKG_CORE_DIR" "-Dman1dir=$PPKG_CORE_DIR/share/man/man1" "-Dman3dir=$PPKG_CORE_DIR/share/man/man3" -des -Dmake=gmake -Duselargefiles -Duseshrplib -Dusethreads -Dusenm=false -Dusedl=true
                    run "$GMAKE" "--jobs=$NATIVE_OS_NCPU"
                    run "$GMAKE" install

                    printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                fi
            }

            [ "$PACKAGE_USE_LIBTOOL" = yes ] && {
                step "install libtool"

                SRC_URL='https://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.xz'
                SRC_SHA='4f7f217f057ce655ff22559ad221a0fd8ef84ad1fc5fcb6990cecc333aa1635d'

                RECEIPT_FILEPATH="$PPKG_CORE_DIR/.libtool"

                if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                    note "libtool already has been built, skipped."
                else
                    wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                    SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/libtool"

                    run install -d "$SRC_DIR"
                    run cd         "$SRC_DIR"

                    run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                    run ./configure "--prefix=$PPKG_CORE_DIR" --enable-ltdl-install
                    run "$GMAKE" "--jobs=$NATIVE_OS_NCPU"
                    run "$GMAKE" install

                    printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                fi
            }

            [ "$PACKAGE_USE_AUTOCONF" = yes ] && {
                step "install autoconf"

                SRC_URL='https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.gz'
                SRC_SHA='431075ad0bf529ef13cb41e9042c542381103e80015686222b8a9d4abef42a1c'

                RECEIPT_FILEPATH="$PPKG_CORE_DIR/.autoconf"

                if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                    note "autoconf already has been built, skipped."
                else
                    wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                    SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/autoconf"

                    run install -d "$SRC_DIR"
                    run cd         "$SRC_DIR"

                    run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                    run ./configure "--prefix=$PPKG_CORE_DIR"
                    run "$GMAKE" "--jobs=$NATIVE_OS_NCPU"
                    run "$GMAKE" install

                    printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                fi
            }

            [ "$PACKAGE_USE_AUTOMAKE" = yes ] && {
                step "install automake"

                SRC_URL='https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.xz'
                SRC_SHA='f01d58cd6d9d77fbdca9eb4bbd5ead1988228fdb73d6f7a201f5f8d6b118b469'

                RECEIPT_FILEPATH="$PPKG_CORE_DIR/.automake"

                if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                    note "automake already has been built, skipped."
                else
                    wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                    SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/automake"

                    run install -d "$SRC_DIR"
                    run cd         "$SRC_DIR"

                    run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                    run ./configure "--prefix=$PPKG_CORE_DIR"
                    run "$GMAKE" "--jobs=$NATIVE_OS_NCPU"
                    run "$GMAKE" install

                    printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                fi
            }

            [ "$PACKAGE_USE_PYTHON3" = yes ] && {
                case $NATIVE_OS_KIND in
                    openbsd)
                        step "install python3 via pkg_add"
                        run sudo pkg_add python3
                        ;;
                    netbsd)
                        step "install python3 via pkgin"
                        run sudo pkgin -y install python3
                        ;;
                    freebsd)
                        step "install python3 via pkg"
                        run sudo pkg install -y python3
                        ;;
                    *)
                        step "install zlib"

                        ZLIB_FORMULA_FILEPATH="$PPKG_FORMULA_REPO_ROOT/offical-core/formula/zlib.yml"

                        SRC_URL="$(yq .src-url "$ZLIB_FORMULA_FILEPATH")"
                        SRC_SHA="$(yq .src-sha "$ZLIB_FORMULA_FILEPATH")"

                        RECEIPT_FILEPATH="$PPKG_CORE_DIR/.zlib"

                        if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                            note "zlib already has been built, skipped."
                        else
                            wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                            SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/zlib"

                            run install -d "$SRC_DIR"
                            run cd         "$SRC_DIR"

                            run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                            sed_in_place 's|/share/pkgconfig|/lib/pkgconfig|' CMakeLists.txt

                            run "$CMAKE" -DCMAKE_INSTALL_PREFIX=$PPKG_CORE_DIR -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_VERBOSE_MAKEFILE=OFF -S . -B build.d
                            run "$CMAKE" --build   build.d -- "--jobs=$NATIVE_OS_NCPU"
                            run "$CMAKE" --install build.d

                            printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                        fi

                        ################################################################################################

                        step "install sqlite3"

                        SQLITE_FORMULA_FILEPATH="$PPKG_FORMULA_REPO_ROOT/offical-core/formula/sqlite.yml"

                        SRC_URL="$(yq .src-url "$SQLITE_FORMULA_FILEPATH")"
                        SRC_SHA="$(yq .src-sha "$SQLITE_FORMULA_FILEPATH")"

                        RECEIPT_FILEPATH="$PPKG_CORE_DIR/.sqlite"

                        if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                            note "sqlite3 already has been built, skipped."
                        else
                            wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                            SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/sqlite"

                            run install -d "$SRC_DIR"
                            run cd         "$SRC_DIR"

                            run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                            run ./configure "--prefix=$PPKG_CORE_DIR" --disable-dependency-tracking --enable-static --disable-shared --enable-largefile --disable-editline --disable-readline
                            run "$GMAKE" "--jobs=$NATIVE_OS_NCPU"
                            run "$GMAKE" install

                            printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                        fi

                        ################################################################################################

                        step "install libffi"

                        SRC_URL='https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz'
                        SRC_SHA='d66c56ad259a82cf2a9dfc408b32bf5da52371500b84745f7fb8b645712df676'

                        RECEIPT_FILEPATH="$PPKG_CORE_DIR/.libffi"

                        if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                            note "libffi already has been built, skipped."
                        else
                            wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                            SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/libffi"

                            run install -d "$SRC_DIR"
                            run cd         "$SRC_DIR"

                            run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                            run ./configure "--prefix=$PPKG_CORE_DIR" --disable-dependency-tracking --enable-static --disable-shared --disable-docs --disable-symvers
                            run "$GMAKE" "--jobs=$NATIVE_OS_NCPU"
                            run "$GMAKE" install

                            printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                        fi

                        ################################################################################################

                        step "install expat"

                        SRC_URL='https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-2.5.0.tar.xz'
                        SRC_SHA='ef2420f0232c087801abf705e89ae65f6257df6b7931d37846a193ef2e8cdcbe'

                        RECEIPT_FILEPATH="$PPKG_CORE_DIR/.expat"

                        if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                            note "expat already has been built, skipped."
                        else
                            wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                            SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/expat"

                            run install -d "$SRC_DIR"
                            run cd         "$SRC_DIR"

                            run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                            run "$CMAKE" -DCMAKE_INSTALL_PREFIX=$PPKG_CORE_DIR -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_VERBOSE_MAKEFILE=OFF -DEXPAT_BUILD_DOCS=OFF -DEXPAT_BUILD_TESTS=OFF -DEXPAT_BUILD_FUZZERS=OFF -DEXPAT_BUILD_EXAMPLES=OFF -DEXPAT_BUILD_TOOLS=OFF -S . -B build.d
                            run "$CMAKE" --build   build.d -- "--jobs=$NATIVE_OS_NCPU"
                            run "$CMAKE" --install build.d

                            printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                        fi

                        ################################################################################################

                        step "install openssl"

                        SRC_URL='https://www.openssl.org/source/openssl-3.0.5.tar.gz'
                        SRC_SHA='aa7d8d9bef71ad6525c55ba11e5f4397889ce49c2c9349dcea6d3e4f0b024a7a'

                        RECEIPT_FILEPATH="$PPKG_CORE_DIR/.openssl"

                        if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                            note "openssl already has been built, skipped."
                        else
                            wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                            SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/openssl"

                            run install -d "$SRC_DIR"
                            run cd         "$SRC_DIR"

                            run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                            # https://github.com/openssl/openssl/issues/19232
                            if [ "$NATIVE_OS_KIND" = openbsd ] ; then
                                run sed -i 's/-Wl,-z,defs//' Configurations/shared-info.pl
                            fi

                            run ./config no-tests no-ssl3 no-ssl3-method no-zlib --prefix=$PPKG_CORE_DIR --libdir=$PPKG_CORE_DIR/lib --openssldir=$PPKG_CORE_DIR/etc/ssl
                            run "$GMAKE" "--jobs=$NATIVE_OS_NCPU"
                            run "$GMAKE" install

                            printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                        fi

                        ################################################################################################

                        step "install python3"

                        SRC_URL='https://www.python.org/ftp/python/3.11.2/Python-3.11.2.tgz'
                        SRC_SHA='2411c74bda5bbcfcddaf4531f66d1adc73f247f529aee981b029513aefdbf849'

                        RECEIPT_FILEPATH="$PPKG_CORE_DIR/.python3"

                        if [ -f "$RECEIPT_FILEPATH" ] && [ "$(cat "$RECEIPT_FILEPATH")" = "$SRC_SHA" ] ; then
                            note "python3 already has been built, skipped."
                        else
                            wfetch "$SRC_URL" --sha256="$SRC_SHA" --output-dir="$PPKG_DOWNLOADS_DIR"

                            SRC_DIR="$PACKAGE_WORKING_DIR/$TIMESTAMP_UNIX/python3"

                            run install -d "$SRC_DIR"
                            run cd         "$SRC_DIR"

                            run tar vxf "$FETCH_OUTPUT_PATH" --strip-components=1 --no-same-owner

                            unset PYTHONHOME
                            unset PYTHONPATH

                            run ./configure "--prefix=$PPKG_CORE_DIR" --with-system-expat --with-system-ffi --with-openssl=$PPKG_CORE_DIR --with-ensurepip=yes --with-lto --enable-ipv6 --enable-shared --enable-largefile --disable-option-checking --disable-nls --disable-debug --enable-loadable-sqlite-extensions --disable-profiling
                            run "$GMAKE" "--jobs=$NATIVE_OS_NCPU"
                            run "$GMAKE" install

                            printf '%s\n' "$SRC_SHA" > "$RECEIPT_FILEPATH"
                        fi

                esac
            }

            :
        )
    fi

    PATH="$(printf '%s\n' "$PATH" | sed "s|:$PPKG_CORE_BIN_DIR||g")"
    PATH="$PPKG_CORE_BIN_DIR:$PATH"

    #########################################################################################

    [ -n "$PACKAGE_DEP_PYM" ] && {
        step "install needed python packages via pip3"

        run pip3 --version
        run pip3 install --upgrade pip setuptools wheel
        run pip3 --version

        for item in $PACKAGE_DEP_PYM
        do
            run pip3 install "$item" --upgrade
        done
    }

    #########################################################################################

    # cpan use the C/C++ compiler same as perl was built with
    # so make sure C/C++ compiler be found before reaching here

    [ -n "$PACKAGE_DEP_PLM" ] && {
        step "install needed perl modules via cpan"

        for item in $PACKAGE_DEP_PLM
        do
            if perl -M"$item" -le 'print "installed"' > /dev/null 2>&1 ; then
                note "perl module $item has been already installed."
            else
                case $item in
                    XML::Parser)
                        # https://metacpan.org/release/TODDR/XML-Parser-2.46/source/Makefile.PL#L8-9
                        export EXPATLIBPATH="$expat_LIBRARY_DIR"
                        export EXPATINCPATH="$expat_INCLUDE_DIR"
                        echo EXPATLIBPATH=$EXPATLIBPATH
                        echo EXPATINCPATH=$EXPATINCPATH
                        ;;
                esac

                # Would you like to configure as much as possible automatically? [yes]
                run "printf '%s\n' 'yes' | cpan $item"
            fi
        done

        if [ -d "$HOME/perl5/bin" ] ; then
            # cpan install to default local location
            bppend_to_PATH "$HOME/perl5/bin"
        fi
    }

    #########################################################################################

    step "locate build tools"

    unset AUTORECONF
    unset AUTOCONF
    unset AUTOMAKE
    unset ACLOCAL
    unset PERL
    unset M4

    unset MESON
    unset CMAKE
    unset XMAKE
    unset GMAKE
    unset NINJA

    unset BEAR
    unset CCACHE
    unset PKG_CONFIG

    if [ "$PACKAGE_BUILD_SYSTEM_AUTOGENSH" = yes ] || [ "$PACKAGE_BUILD_SYSTEM_AUTOTOOLS" = yes ] ; then
        AUTORECONF=$(command -v autoreconf) || abort 1 "command not found: autoreconf"
        AUTOCONF=$(command -v autoconf)     || abort 1 "command not found: autoconf"
        AUTOMAKE=$(command -v automake)     || abort 1 "command not found: automake"
        ACLOCAL=$(command -v aclocal)       || abort 1 "command not found: aclocal"
        PERL=$(command -v perl)             || abort 1 "command not found: perl"
        M4=$(command -v m4)                 || abort 1 "command not found: m4"

        run "$AUTORECONF" --version
        printf '\n'
        run "$AUTOCONF"   --version
        printf '\n'
        run "$AUTOMAKE"   --version
        printf '\n'
        run "$ACLOCAL"    --version
        printf '\n'
        run "$PERL"       --version
        printf '\n'
        run "$M4"         --version
        printf '\n'
    fi

    [ "$PACKAGE_BUILD_SYSTEM_MESON" = yes ] && {
        MESON=$(command -v meson) || abort 1 "command not found: meson"
        run "$MESON"      --version
        printf '\n'
    }

    [ "$PACKAGE_BUILD_SYSTEM_CMAKE" = yes ] && {
        CMAKE=$(command -v cmake) || abort 1 "command not found: cmake"
        run "$CMAKE"      --version
        printf '\n'
    }

    [ "$PACKAGE_BUILD_SYSTEM_XMAKE" = yes ] && {
        XMAKE=$(command -v xmake) || abort 1 "command not found: xmake"

        # error: Running xmake as root is extremely dangerous and no longer supported.
        # As xmake does not drop privileges on installation you would be giving all
        # build scripts full access to your system.
        # Or you can add `--root` option or XMAKE_ROOT=y to allow run as root temporarily.
        export XMAKE_ROOT=y

        run "$XMAKE"      --version
        printf '\n'
    }

    [ "$PACKAGE_BUILD_SYSTEM_GMAKE" = yes ] && {
        GMAKE=$(command -v gmake || command -v make) || abort 1 "command not found: gmake and make"
        run "$GMAKE"      --version
        printf '\n'
    }

    [ "$PACKAGE_BUILD_SYSTEM_NINJA" = yes ] && {
        NINJA=$(command -v ninja) || abort 1 "command not found: ninja"
        run "$NINJA"      --version
        printf '\n'
    }

    [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] && {
        RUSTUP=$(command -v rustup) || abort 1 "command not found: rustup"
        CARGO=$(command -v cargo)   || abort 1 "command not found: cargo"
        run "$RUSTUP"     --version
        printf '\n'
        run "$CARGO"      --version
        printf '\n'
    }

    [ "$PACKAGE_BUILD_SYSTEM_GO" = yes ] && {
        GO=$(command -v go) || abort 1 "command not found: go"
        run "$GO"      version
        printf '\n'
    }

    [ "$CCACHE_ENABLED" = yes ] && {
        CCACHE=$(command -v ccache) || abort 1 "command not found: ccache"
        run "$CCACHE"    --version
        printf '\n'
    }

    PKG_CONFIG=$(command -v pkg-config || command -v pkgconf) || abort 1 "command not found: pkg-config"

    run "$PKG_CONFIG"    --version
    printf '\n'

    unset  M4
    export M4="$(command -v m4 || true)"

    #########################################################################################

    step "create symbolic link for ccache"

    if [ "$CCACHE_ENABLED" = yes ] ; then
        run ln -sf "$CCACHE" "$PACKAGE_INSTALLING_BIN_DIR/$(basename "$CC")"
        run ln -sf "$CCACHE" "$PACKAGE_INSTALLING_BIN_DIR/$(basename "$CXX")"

        "$CCACHE" -s > "$PACKAGE_WORKING_DIR/ccache-s.txt"
    else
        note "ccache is disabled, skipped."
    fi

    #########################################################################################

    [ -n "$PACKAGE_DEP_PKG" ] && {
        step "create symbolic links for dependent libraries"

        unset libFileNameSuffix

        case $LINK_TYPE in
            static-only|static-prefered)
                libFileNameSuffix='.a'
                ;;
            shared-only|shared-prefered)
                if [ "$NATIVE_OS_KIND" = darwin ] ; then
                    libFileNameSuffix='.dylib'
                else
                    libFileNameSuffix='.so'
                fi
                ;;
            *)  die "unrecognized link type: $LINK_TYPE"
        esac

        for DEPENDENT_PACKAGE_INSTALL_DIR in $RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS
        do
            DEPENDENT_PACKAGE_LIBRARY_DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/lib"

            if [ -d "$DEPENDENT_PACKAGE_LIBRARY_DIR" ] ; then
                for libFileName in $(find "$DEPENDENT_PACKAGE_LIBRARY_DIR" -maxdepth 1 -mindepth 1 -name "lib*$libFileNameSuffix" -exec basename {} \;)
                do
                    if [ ! -e "$PACKAGE_INSTALLING_LIB_DIR/$libFileName" ] ; then
                        run ln -s "$DEPENDENT_PACKAGE_LIBRARY_DIR/$libFileName" "$PACKAGE_INSTALLING_LIB_DIR/$libFileName"
                    fi
                done
            fi
        done
    }

    #########################################################################################

    case $NATIVE_OS_KIND in
        netbsd)
            printf '%s\n' 'INPUT(-lc)' > "$PACKAGE_WORKING_DIR/lib/libdl.a"
            ;;
        openbsd)
            # https://github.com/mesonbuild/meson/issues/5390
            printf '%s\n' 'INPUT(-lc)' > "$PACKAGE_WORKING_DIR/lib/libdl.a"
            printf '%s\n' 'INPUT(-lc)' > "$PACKAGE_WORKING_DIR/lib/librt.a"
            printf '%s\n' 'INPUT(-lc)' > "$PACKAGE_WORKING_DIR/lib/libcrypt.a"
            ;;
    esac

    #########################################################################################

    if [ "$NATIVE_OS_KIND" = 'darwin' ] ; then
        step "determine which version would be built for"

        # If -mmacosx-version-min is unspecified, the default deployment target is read from MACOSX_DEPLOYMENT_TARGET environment variable. This option only affects Darwin targets.
        # https://clang.llvm.org/docs/CommandGuide/clang.html#envvar-MACOSX_DEPLOYMENT_TARGET
        # https://clang.llvm.org/docs/CommandGuide/clang.html#cmdoption-mmacosx-version-min
        if [ -z "$MACOSX_DEPLOYMENT_TARGET" ] ; then
            unset NATIVE_OS_VERS_MAJOR
            unset NATIVE_OS_VERS_MINOR

            NATIVE_OS_VERS_MAJOR="$(printf '%s\n' "$NATIVE_OS_VERS" | cut -d. -f1)"
            NATIVE_OS_VERS_MINOR="$(printf '%s\n' "$NATIVE_OS_VERS" | cut -d. -f2)"

            export MACOSX_DEPLOYMENT_TARGET="$NATIVE_OS_VERS_MAJOR.$NATIVE_OS_VERS_MINOR"
        fi

        printf '%s\n' "$MACOSX_DEPLOYMENT_TARGET"
    fi

    #########################################################################################

    step "config CFLAGS CXXFLAGS CPPFLAGS LDFLAGS"

    CCFLAGS="$CCFLAGS $PACKAGE_CCFLAGS"
    XXFLAGS="$XXFLAGS $PACKAGE_XXFLAGS"
    PPFLAGS="$PPFLAGS $PACKAGE_PPFLAGS"
    LDFLAGS="$LDFLAGS $PACKAGE_LDFLAGS"

    CCFLAGS="$(printf '%s\n' "$CCFLAGS" | sed -e 's|--static||g' -e 's|-static||g')"
    XXFLAGS="$(printf '%s\n' "$XXFLAGS" | sed -e 's|--static||g' -e 's|-static||g')"
    LDFLAGS="$(printf '%s\n' "$LDFLAGS" | sed -e 's|--static||g' -e 's|-static||g')"

    if [ "$NATIVE_OS_KIND" != 'darwin' ] ; then
        if [ "$LINK_TYPE" = static-only ] ; then
            LDFLAGS="-static --static $LDFLAGS"
        fi
    fi

    for DEPENDENT_PACKAGE_NAME in $RECURSIVE_DEPENDENT_PACKAGE_NAMES
    do
        DEPENDENT_PACKAGE_NAME_UNDERSCORE=$(printf '%s\n' "$DEPENDENT_PACKAGE_NAME" | tr '@+-.' '_')

        DEPENDENT_PACKAGE_INSTALL_DIR="$PPKG_PACKAGE_INSTALLED_ROOT/$DEPENDENT_PACKAGE_NAME"
        DEPENDENT_PACKAGE_BINARY__DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/bin"
        DEPENDENT_PACKAGE_INCLUDE_DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/include"
        DEPENDENT_PACKAGE_LIBRARY_DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/lib"
        DEPENDENT_PACKAGE_PKGCONF_DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/lib/pkgconfig"

        eval "${DEPENDENT_PACKAGE_NAME_UNDERSCORE}_INSTALL_DIR='$DEPENDENT_PACKAGE_INSTALL_DIR'"
        eval "${DEPENDENT_PACKAGE_NAME_UNDERSCORE}_BINARY__DIR='$DEPENDENT_PACKAGE_BINARY__DIR'"
        eval "${DEPENDENT_PACKAGE_NAME_UNDERSCORE}_INCLUDE_DIR='$DEPENDENT_PACKAGE_INCLUDE_DIR'"
        eval "${DEPENDENT_PACKAGE_NAME_UNDERSCORE}_LIBRARY_DIR='$DEPENDENT_PACKAGE_LIBRARY_DIR'"

        if [ -d "$DEPENDENT_PACKAGE_INCLUDE_DIR" ] ; then
            PPFLAGS="-I$DEPENDENT_PACKAGE_INCLUDE_DIR $PPFLAGS"
        fi

        if [ -d "$DEPENDENT_PACKAGE_LIBRARY_DIR" ] ; then
            LDFLAGS="-L$DEPENDENT_PACKAGE_LIBRARY_DIR -Wl,-rpath,$DEPENDENT_PACKAGE_LIBRARY_DIR $LDFLAGS"
        fi
    done

    PPFLAGS="-I$PACKAGE_INSTALLING_INC_DIR $PPFLAGS"
    LDFLAGS="-L$PACKAGE_INSTALLING_LIB_DIR $LDFLAGS"

    export   CFLAGS="$CCFLAGS"
    export CXXFLAGS="$XXFLAGS"
    export CPPFLAGS="$PPFLAGS"
    export  LDFLAGS="$LDFLAGS"

    printf '%b\n' "${COLOR_PURPLE}==>${COLOR_OFF} CFLAGS"
    printf '%s\n' "$CFLAGS" | xargs printf '        %s\n'
    printf '\n'

    printf '%b\n' "${COLOR_PURPLE}==>${COLOR_OFF} CXXFLAGS"
    printf '%s\n' "$CXXFLAGS" | xargs printf '        %s\n'
    printf '\n'

    printf '%b\n' "${COLOR_PURPLE}==>${COLOR_OFF} CPPFLAGS"
    printf '%s\n' "$CPPFLAGS" | xargs printf '        %s\n'
    printf '\n'

    printf '%b\n' "${COLOR_PURPLE}==>${COLOR_OFF} LDFLAGS"
    printf '%s\n' "$LDFLAGS" | xargs printf '        %s\n'

    #########################################################################################

    export       CC_FOR_BUILD="$CC"
    export      CXX_FOR_BUILD="$CXX"
    export      CPP_FOR_BUILD="$CPP"
    export   CFLAGS_FOR_BUILD="$CFLAGS"
    export CXXFLAGS_FOR_BUILD="$CXXFLAGS"
    export CPPFLAGS_FOR_BUILD="$CPPFLAGS"
    export  LDFLAGS_FOR_BUILD="$LDFLAGS"

    #########################################################################################

    step "list XDG_DATA_DIRS"

    # https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
    export XDG_DATA_DIRS

    for DEPENDENT_PACKAGE_INSTALL_DIR in $RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS
    do
        # https://gi.readthedocs.io/en/latest/tools/g-ir-scanner.html#environment-variables
        if [ -d "$DEPENDENT_PACKAGE_INSTALL_DIR/share/gir-1.0" ] ; then
            if [ -z "$XDG_DATA_DIRS" ] ; then
                XDG_DATA_DIRS="$DEPENDENT_PACKAGE_INSTALL_DIR/share"
            else
                XDG_DATA_DIRS="$DEPENDENT_PACKAGE_INSTALL_DIR/share:$XDG_DATA_DIRS"
            fi
        fi

        # https://help.gnome.org/admin//system-admin-guide/2.32/mimetypes-database.html.en
        if [ -d "$DEPENDENT_PACKAGE_INSTALL_DIR/share/mime" ] ; then
            if [ -z "$XDG_DATA_DIRS" ] ; then
                XDG_DATA_DIRS="$DEPENDENT_PACKAGE_INSTALL_DIR/share"
            else
                XDG_DATA_DIRS="$DEPENDENT_PACKAGE_INSTALL_DIR/share:$XDG_DATA_DIRS"
            fi
        fi
    done

    printf '%s\n' "$XDG_DATA_DIRS" | tr : '\n'

    #########################################################################################

    step "list ACLOCAL_PATH"

    # https://www.gnu.org/software/automake/manual/html_node/Macro-Search-Path.html
    export ACLOCAL_PATH

   for DEPENDENT_PACKAGE_INSTALL_DIR in $RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS
    do
        DEPENDENT_PACKAGE_ACLOCAL_PATH="$DEPENDENT_PACKAGE_INSTALL_DIR/share/aclocal"

        if [ -d "$DEPENDENT_PACKAGE_ACLOCAL_PATH" ] ; then
            if [ -z "$ACLOCAL_PATH" ] ; then
                ACLOCAL_PATH="$DEPENDENT_PACKAGE_ACLOCAL_PATH"
            else
                ACLOCAL_PATH="$DEPENDENT_PACKAGE_ACLOCAL_PATH:$ACLOCAL_PATH"
            fi
        fi
    done

    printf '%s\n' "$ACLOCAL_PATH" | tr : '\n'

    #########################################################################################

    step "list PATH"

    PATH="$PACKAGE_INSTALLING_BIN_DIR:$PATH"

    printf '%s\n' "$PATH" | tr : '\n'

    #########################################################################################

    step "config environment variables for pkg-config"

    if [ "$LOG_LEVEL" -ge 3 ] ; then
        export PKG_CONFIG_DEBUG_SPEW='set'
    fi

    # override the default search directory (usually /usr/lib/pkgconfig:/usr/share/pkgconfig)
    # because we only want to use our own
    export PKG_CONFIG_LIBDIR="$PPKG_CORE_DIR/lib/pkgconfig"

    if [ -z "$PKG_CONFIG_PATH" ] ; then
        export PKG_CONFIG_PATH="$PACKAGE_WORKING_DIR/lib/pkgconfig"
    else
        export PKG_CONFIG_PATH="$PACKAGE_WORKING_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"
    fi

    for DEPENDENT_PACKAGE_INSTALL_DIR in $RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS
    do
        DEPENDENT_PACKAGE_PKGCONF_DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/lib/pkgconfig"

        if [ -d "$DEPENDENT_PACKAGE_PKGCONF_DIR" ] ; then
            PKG_CONFIG_PATH="$DEPENDENT_PACKAGE_PKGCONF_DIR:$PKG_CONFIG_PATH"
        else
            DEPENDENT_PACKAGE_PKGCONF_DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/share/pkgconfig"

            if [ -d "$DEPENDENT_PACKAGE_PKGCONF_DIR" ] ; then
                PKG_CONFIG_PATH="$DEPENDENT_PACKAGE_PKGCONF_DIR:$PKG_CONFIG_PATH"
            fi
        fi
    done

    printf 'PKG_CONFIG_DEBUG_SPEW = %s\n' "$PKG_CONFIG_DEBUG_SPEW"

    printf 'PKG_CONFIG          = %s\n' "$PKG_CONFIG"

    printf 'PKG_CONFIG_LIBDIR   = %s\n' "$PKG_CONFIG_LIBDIR"

    export IFS=':'

    FIRST=yes

    for item in $(printf '%s\n' "$PKG_CONFIG_PATH")
    do
        if [ "$FIRST" = yes ] ; then
            FIRST=no
            printf 'PKG_CONFIG_PATH     = %s\n' "$item"
        else
            printf '%s\n' "                      $item"
        fi
    done

    unset IFS

    #########################################################################################

    if [ "$PACKAGE_BUILD_SYSTEM_CMAKE" = yes ] ; then
        step "config environment variables for cmake"

        # https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)

        unset CMAKE_PREFIX_PATH
        unset CMAKE_APPLE_SILICON_PROCESSOR
        unset CMAKE_BUILD_PARALLEL_LEVEL
        unset CMAKE_BUILD_TYPE
        unset CMAKE_CONFIGURATION_TYPES
        unset CMAKE_CONFIG_TYPE
        unset CMAKE_EXPORT_COMPILE_COMMANDS
        unset CMAKE_GENERATOR
        unset CMAKE_GENERATOR_INSTANCE
        unset CMAKE_GENERATOR_PLATFORM
        unset CMAKE_GENERATOR_TOOLSET
        unset CMAKE_INSTALL_MODE
        unset CMAKE_C_COMPILER_LAUNCHER
        unset CMAKE_C_LINKER_LAUNCHER
        unset CMAKE_CXX_COMPILER_LAUNCHER
        unset CMAKE_CXX_LINKER_LAUNCHER
        unset CMAKE_MSVCIDE_RUN_PATH
        unset CMAKE_NO_VERBOSE
        unset CMAKE_OSX_ARCHITECTURES
        unset CMAKE_TOOLCHAIN_FILE
        unset DESTDIR
        unset CTEST_INTERACTIVE_DEBUG_MODE
        unset CTEST_OUTPUT_ON_FAILURE
        unset CTEST_PARALLEL_LEVEL
        unset CTEST_PROGRESS_OUTPUT
        unset CTEST_USE_LAUNCHERS_DEFAULT
        unset DASHBOARD_TEST_FROM_CTEST

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_BUILD_PARALLEL_LEVEL.html
        export CMAKE_BUILD_PARALLEL_LEVEL="$BUILD_NJOBS"

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_GENERATOR.html
        if [ "$PACKAGE_BUILD_SYSTEM_NINJA" = yes ] ; then
            export CMAKE_GENERATOR='Ninja'
        else
            export CMAKE_GENERATOR='Unix Makefiles'
        fi

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_EXPORT_COMPILE_COMMANDS.html
        if [ "$EXPORT_COMPILE_COMMANDS_JSON" = yes ] ; then
            export CMAKE_EXPORT_COMPILE_COMMANDS=ON
        else
            export CMAKE_EXPORT_COMPILE_COMMANDS=OFF
        fi

        case $BUILD_TYPE in
            debug)   CMAKE_BUILD_TYPE=Debug   ;;
            release) CMAKE_BUILD_TYPE=Release ;;
        esac

        case $INSTALL_LIB in
            static)  BUILD_SHARED_LIBS=OFF ;;
            *)       BUILD_SHARED_LIBS=ON
        esac

        if [ "$LOG_LEVEL" -eq 0 ] ; then
            CMAKE_VERBOSE_MAKEFILE=OFF
            CMAKE_COLOR_MAKEFILE=OFF
        else
            CMAKE_VERBOSE_MAKEFILE=ON
            CMAKE_COLOR_MAKEFILE=ON
        fi

        # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_DEBUG_MODE.html
        if [ "$LOG_LEVEL" -ge 3 ] ; then
            CMAKE_FIND_DEBUG_MODE=ON
        else
            CMAKE_FIND_DEBUG_MODE=OFF
        fi

        CMAKE_TOOLCHAIN_FILE="$PACKAGE_WORKING_DIR/toolchain.cmake"

        # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_ROOT_PATH.html
        unset CMAKE_FIND_ROOT_PATH

        if [ -n "$PACKAGE_DEP_PKG" ] ; then
            CMAKE_FIND_ROOT_PATH="$(printf '%s\n' "$RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS" | tr ' ' ';')"
        fi

        env | sed -n '/^CMAKE_/p'
    fi

    #########################################################################################

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        step "config environment variables for cargo and rustc"

        # https://docs.rs/backtrace/latest/backtrace/
        export RUST_BACKTRACE=1

        unset RUST_TARGET

        case $NATIVE_OS_KIND-$NATIVE_OS_ARCH in
            linux-x86_64)
                case $NATIVE_OS_LIBC in
                    glibc) RUST_TARGET=x86_64-unknown-linux-gnu  ;;
                    musl)  RUST_TARGET=x86_64-unknown-linux-musl ;;
                    *)     abort 1 "unrecognized libc: $NATIVE_OS_LIBC"
                esac
                ;;
            linux-aarch64)
                case $NATIVE_OS_LIBC in
                    glibc) RUST_TARGET=aarch64-unknown-linux-gnu  ;;
                    musl)  RUST_TARGET=aarch64-unknown-linux-musl ;;
                    *)     abort 1 "unrecognized libc: $NATIVE_OS_LIBC"
                esac
                ;;
            darwin-x86_64)  RUST_TARGET=x86_64-apple-darwin  ;;
            darwin-aarch64) RUST_TARGET=aarch64-apple-darwin ;;

            freebsd-amd64)  RUST_TARGET=x86_64-unknown-freebsd ;;

            netbsd-amd64)   RUST_TARGET=x86_64-unknown-netbsd  ;;
        esac

        RUST_TARGET_UPPERCASE_UNDERSCORE=$(printf '%s\n' "$RUST_TARGET" | tr a-z A-Z | tr - _)

        # https://doc.rust-lang.org/cargo/reference/config.html#environment-variables
        # https://doc.rust-lang.org/cargo/reference/environment-variables.html
        export "CARGO_TARGET_${RUST_TARGET_UPPERCASE_UNDERSCORE}_AR"="$AR"
        export "CARGO_TARGET_${RUST_TARGET_UPPERCASE_UNDERSCORE}_LINKER"="$CC"

        export CARGO_BUILD_JOBS="$BUILD_NJOBS"

        # this environment variable is not defined by Rust, but it is widely used by third-party project.
        export RUST_TARGET

        for DEPENDENT_PACKAGE_INSTALL_DIR in $RECURSIVE_DEPENDENT_PACKAGE_INSTALL_DIRS
        do
            DEPENDENT_PACKAGE_LIBRARY_DIR="$DEPENDENT_PACKAGE_INSTALL_DIR/lib"

            if [ -d "$DEPENDENT_PACKAGE_LIBRARY_DIR" ] ; then
                RUSTFLAGS="-Clink-arg=-L$DEPENDENT_PACKAGE_LIBRARY_DIR -Clink-arg=-Wl,-rpath,$DEPENDENT_PACKAGE_LIBRARY_DIR $RUSTFLAGS"
            fi
        done

        # https://doc.rust-lang.org/rustc/codegen-options/index.html#link-arg
        export RUSTFLAGS="-Clinker=$CC -Clink-arg=-L$PACKAGE_WORKING_DIR/lib $RUSTFLAGS"

        if [ "$LINK_TYPE" = 'static-only' ] ; then
            if [ "$NATIVE_OS_KIND" != darwin ] ; then
                if [ "$NATIVE_OS_LIBC" != 'glibc' ] ; then
                    printf '%s\n' 'INPUT(-l:libgcc_eh.a)' > "$PACKAGE_WORKING_DIR/lib/libgcc_s.a"
                    export RUSTFLAGS="$RUSTFLAGS -Clink-arg=-static -Clink-arg=-ffunction-sections -Clink-arg=-fdata-sections -Clink-arg=-Wl,--gc-sections -Clink-arg=-Wl,--no-dynamic-linker"
                fi
            fi
        fi

        # https://libraries.io/cargo/cc
        # https://crates.io/crates/cc
        # https://docs.rs/cc/latest/cc/
        # https://github.com/alexcrichton/cc-rs
        export HOST_CC="$CC"
        export HOST_CFLAGS="$CFLAGS $CPPFLAGS"

        export HOST_CXX="$CXX"
        export HOST_CXXFLAGS="$CXXFLAGS $CPPFLAGS"

        export HOST_AR="$AR"

        export TARGET_CC="$CC"
        export TARGET_CFLAGS="$CFLAGS $CPPFLAGS"

        export TARGET_CXX="$CXX"
        export TARGET_CXXFLAGS="$CXXFLAGS $CPPFLAGS"

        export TARGET_AR="$AR"


        # https://libraries.io/cargo/pkg-config
        # https://crates.io/crates/pkg-config
        # https://docs.rs/pkg-config/latest/pkg_config/
        # https://github.com/rust-lang/pkg-config-rs
        # export TARGET_PKG_CONFIG_ALLOW_CROSS=1


        # https://libraries.io/cargo/cmake
        # https://crates.io/crates/cmake
        # https://docs.rs/cmake/latest/cmake/
        # https://github.com/alexcrichton/cmake-rs
        # this variable is not motioned in their document. you must read the source code of cmake-rs crate.
        # export TARGET_CMAKE_TOOLCHAIN_FILE="$TARGET_WORKING_DIR/toolchain.cmake"


        for item in $RECURSIVE_DEPENDENT_PACKAGE_NAMES
        do
            case $item in
                openssl)
                    # https://docs.rs/openssl/0.10.35/openssl/
                    export OPENSSL_DIR="$openssl_INSTALL_DIR"
                    ;;
                openssl@1.1)
                    # https://docs.rs/openssl/0.10.35/openssl/
                    export OPENSSL_DIR="$openssl_1_1_INSTALL_DIR"
                    ;;
            esac
        done

        env | grep CARGO_
        env | grep RUST_

        printf '%b\n' "${COLOR_PURPLE}==>${COLOR_OFF} RUSTFLAGS"
        printf '%s\n' "$RUSTFLAGS" | xargs printf '        %s\n'
    fi

    #########################################################################################

    if [ "$PACKAGE_BUILD_SYSTEM_GO" = yes ] ; then
        step "config environment variables for go"

        # https://pkg.go.dev/cmd/cgo
        export CGO_ENABLED=0
        export CGO_CFLAGS="$CFLAGS"
        export CGO_CXXFLAGS="$CXXFLAGS"
        export CGO_CPPFLAGS="$CPPFLAGS"
        export CGO_LDFLAGS="$LDFLAGS"

        export GO111MODULE='auto'

        if [ "$COUNTRY" = china ] ; then
            export GOPROXY='https://goproxy.cn'
        fi

        # https://golang.org/doc/install/source#environment
        unset GOOS
        unset GOARCH

        # export GOOS="$TARGET_OS_TYPE"

        # case $TARGET_OS_ARCH in
        #     armv7*)  export GOARCH=arm   ;;
        #     arm64*)  export GOARCH=arm64 ;;
        #     aarch64) export GOARCH=arm64 ;;
        #     i386)    export GOARCH=386   ;;
        #     i686)    export GOARCH=386   ;;
        #     x86_64)  export GOARCH=amd64 ;;
        # esac
    fi

    #########################################################################################

    [ "$LOG_LEVEL" -ge 3 ] && {
        step "show export variables"
        run export -p
        echo
    }

    #########################################################################################

    step "tree files of the installing top directory"
    run tree --dirsfirst -L 2 "$PACKAGE_WORKING_DIR"

    step "list files of the installing src directory"
    run ls -l "$PACKAGE_INSTALLING_SRC_DIR"

    if [ -n "$PACKAGE_BSCRIPT" ] ; then
        step "list files of the installing build script directory"
        run ls -l "$PACKAGE_BSCRIPT_DIR"
    fi

    #########################################################################################

    [ "$DRYRUN" = yes ] && {
        [ -z "$SHELL" ] || SHELL=$(command -v zsh || command -v bash || command -v sh) || abort 1 "none of zsh|bash|sh shell found in your system."
        exec "$SHELL"
    }

    #########################################################################################

    step "do some preparation works"

    if [ "$PWD" != "$PACKAGE_BSCRIPT_DIR" ] ; then
        run cd "$PACKAGE_BSCRIPT_DIR"
    fi

    if command -v dopatch > /dev/null ; then
        dopatch "$1"
    else
        case $PACKAGE_BUILD_SYSTEM in
            autogen)
                note "dopatch mapping was not found in formula."
                run NOCONFIGURE=yes ./autogen.sh
                ;;
            autotools)
                note "dopatch mapping was not found in formula."
                run autoreconf -ivf
                ;;
            *)  note "dopatch mapping was not found in formula, skipped."
        esac
    fi

    #########################################################################################

    step "building"

    if [ "$PACKAGE_BUILD_IN_BSCRIPT_DIR" = yes ] ; then
        run cd "$PACKAGE_BSCRIPT_DIR"
    else
        run install -d "$PACKAGE_BCACHED_DIR"
        run cd "$PACKAGE_BCACHED_DIR"
    fi

    if [ -d "$PACKAGE_INSTALL_DIR" ] ; then
        run rm -rf "$PACKAGE_INSTALL_DIR"
    fi

    dobuild "$1"

    #########################################################################################

    cd "$PACKAGE_INSTALL_DIR" || abort 1 "nothing is installed."

    [ -z "$(ls)" ]            && abort 1 "nothing is installed."

    #########################################################################################

    if [ "$NATIVE_OS_KIND" = darwin ] ; then
        step "adjust Mach-O files for ${COLOR_GREEN}$*${COLOR_OFF}"
        __adjust_mach_o_files_for_the_given_target "$@"
    else
        step "adjust ELF files for ${COLOR_GREEN}$*${COLOR_OFF}"
        __adjust_elf_files_for_the_given_target "$@"
    fi

    if [ -d "$PACKAGE_INSTALL_DIR/lib" ] ; then
        step "adjust .la files for ${COLOR_GREEN}$*${COLOR_OFF}"
        __adjust_la_files_for_the_given_target "$@"

        step "adjust .pc files for ${COLOR_GREEN}$*${COLOR_OFF}"
        __adjust_pc_files_for_the_given_target "$@"
    fi
}

__adjust_elf_files_for_the_given_target() {
    BASE64_ENCODED_RELATIVE_FILEPATH_LIST=
    BASE64_ENCODED_RELATIVE_FILEPATH_LIST="$(cd "$PACKAGE_INSTALL_DIR" && find -not -name . -type f -exec "$PPKG" util base64-encode '{}' \; -printf '\n')"

    for BASE64_ENCODED_RELATIVE_FILEPATH in $BASE64_ENCODED_RELATIVE_FILEPATH_LIST
    do
        BASE64_DECODED_RELATIVE_FILEPATH=
        BASE64_DECODED_RELATIVE_FILEPATH="$("$PPKG" util base64-decode "$BASE64_ENCODED_RELATIVE_FILEPATH")"

        FILEPATH="$PACKAGE_INSTALL_DIR/${BASE64_DECODED_RELATIVE_FILEPATH#./}"

        [ -w "$FILEPATH" ] || continue

        FILE_HEADER_ACTUAL=
        FILE_HEADER_ACTUAL="$(head -c 18 "$FILEPATH" | "$PPKG" util base16-encode)"

        #echo "$FILE_HEADER_ACTUAL : $FILEPATH"

        ELF_TYPE_EXECUTABLE=no
        ELF_TYPE_SHAREDABLE=no

        # http://www.sco.com/developers/gabi/latest/ch4.eheader.html
        case $FILE_HEADER_ACTUAL in
            7F454C460[12]01010[039]00000000000000000100)
                continue
                ;;
            7F454C460[12]01010[039]00000000000000000200)
                # little-endian mode
                ELF_TYPE_EXECUTABLE=yes
                ;;
            7F454C460[12]01010[039]00000000000000000300)
                # little-endian mode
                ELF_TYPE_SHAREDABLE=yes
                ;;
            7F454C460[12]02010[039]00000000000000000001)
                continue
                ;;
            7F454C460[12]02010[039]00000000000000000002)
                # big-endian mode
                ELF_TYPE_EXECUTABLE=yes
                ;;
            7F454C460[12]02010[039]00000000000000000003)
                # big-endian mode
                ELF_TYPE_SHAREDABLE=yes
                ;;
            7F454C46*)
                abort 1 "mismached ELF header: $FILEPATH, $FILE_HEADER_ACTUAL"
                ;;
            *)  continue
        esac

        # https://github.com/NixOS/patchelf/issues/371

        if [ "$BUILD_TYPE" = release ] ; then
            if [ "$ELF_TYPE_EXECUTABLE" = yes ] ; then
                # freebsd's strip has problem
                if [ "$NATIVE_OS_KIND" != freebsd ] ; then
                    run "$STRIP" $STRIP_ARG "$FILEPATH" || true
                fi
            fi
        fi

        if [ "$ELF_TYPE_EXECUTABLE" = yes ] || [ "$ELF_TYPE_SHAREDABLE" = yes ] ; then
            DT_NEEDED=
            DT_NEEDED="$(patchelf --print-needed "$FILEPATH" 2>/dev/null || true)"

            DT_RUNPATH=
            DT_RUNPATH="$(patchelf --print-rpath "$FILEPATH" 2>/dev/null | tr ':' ' ')"

            if [ -n "$DT_RUNPATH" ] ; then
                run patchelf --remove-rpath "$FILEPATH"
            fi

            unset RUNPATH

            PACKAGE_LIBRARY_DIR="$PACKAGE_INSTALL_DIR/lib"

            if [ -d "$PACKAGE_LIBRARY_DIR" ] ; then
                for NEEDED in $DT_NEEDED
                do
                    if [ -e "$PACKAGE_LIBRARY_DIR/$NEEDED" ] ; then
                        RUNPATH="$PACKAGE_LIBRARY_DIR"
                        break
                    fi
                done
            fi

            for NEEDED in $DT_NEEDED
            do
                case $NEEDED in
                    libc.so.6) ;;
                    libm.so.6) ;;
                    libgcc_s.so.1) ;;
                    ld-linux-x86-64.so.2) ;;
                    *)  for LIBDIR in $DT_RUNPATH
                        do
                            if [ "$LIBDIR" = "$PACKAGE_LIBRARY_DIR" ] ; then
                                continue
                            fi

                            if [ "$LIBDIR" = "$PACKAGE_WORKING_DIR/lib" ] ; then
                                continue
                            fi

                            if [ -e "$LIBDIR/$NEEDED" ] ; then
                                if [ -z "$RUNPATH" ] ; then
                                    RUNPATH="$LIBDIR"
                                else
                                    RUNPATH="$RUNPATH:$LIBDIR"
                                fi
                                break
                            fi
                        done
                esac
            done

            if [ -n "$RUNPATH" ] ; then
                run patchelf --set-rpath "$RUNPATH" "$FILEPATH"
            fi
        fi
    done
}

__adjust_mach_o_files_for_the_given_target() {
    BASE64_ENCODED_RELATIVE_FILEPATH_LIST=
    BASE64_ENCODED_RELATIVE_FILEPATH_LIST="$(cd "$PACKAGE_INSTALL_DIR" && find . -not -name . -type f -exec "$PPKG" util base64-encode '{}' \; -printf '\n')"

    for BASE64_ENCODED_RELATIVE_FILEPATH in $BASE64_ENCODED_RELATIVE_FILEPATH_LIST
    do
        BASE64_DECODED_RELATIVE_FILEPATH=
        BASE64_DECODED_RELATIVE_FILEPATH="$("$PPKG" util base64-decode "$BASE64_ENCODED_RELATIVE_FILEPATH")"

        FILEPATH="$PACKAGE_INSTALL_DIR/${BASE64_DECODED_RELATIVE_FILEPATH#./}"

        FILE_HEADER_ACTUAL=
        FILE_HEADER_ACTUAL="$(head -c 16 "$FILEPATH" | "$PPKG" util base16-encode)"

        # https://github.com/aidansteele/osx-abi-macho-file-format-reference
        case $FILE_HEADER_ACTUAL in
            CFFAEDFE0C000001000000000[26]000000)
                # arm64
                ;;
            CFFAEDFE07000001030000000[26]000000)
                # x86_64
                ;;
            *)  continue
        esac

        DT_SONAME=
        DT_SONAME="$( otool -l "$FILEPATH" | grep LC_ID_DYLIB   -A2 | grep name | sed 's|^[[:space:]]*||' | cut -d ' ' -f2)"

        DT_NEEDED=
        DT_NEEDED="$( otool -l "$FILEPATH" | grep LC_LOAD_DYLIB -A2 | grep name | sed 's|^[[:space:]]*||' | cut -d ' ' -f2)"

        DT_RUNPATH=
        DT_RUNPATH="$(otool -l "$FILEPATH" | grep LC_RPATH      -A2 | grep path | sed 's|^[[:space:]]*||' | cut -d ' ' -f2)"

        if [ -z "$DT_NEEDED" ] ; then
            abort 1 "no dependent shared libraries found in $FILEPATH"
        fi

        echo "DT_SONAME=\n$DT_SONAME"
        echo "DT_NEEDED=\n$DT_NEEDED"
        echo "DT_RUNPATH=\n$DT_RUNPATH"

        case $DT_SONAME in
            '') ;;
            @*) ;;
            /*) ;;
            lib*.dylib) run install_name_tool -id "@rpath/$DT_SONAME" "$FILEPATH"
        esac

        for NEEDED in $DT_NEEDED
        do
            case $NEEDED in
                lib*.dylib)
                    run install_name_tool -change "$NEEDED" "@rpath/$NEEDED" "$FILEPATH"
            esac
        done

        if [ "$BUILD_TYPE" = release ] ; then
            run "$STRIP" $STRIP_ARG "$FILEPATH" || true
        fi
    done
}

__adjust_la_files_for_the_given_target() {
    [ -d "$PACKAGE_INSTALL_DIR/lib" ] || {
        note "no .la files installed, skipped"
        return 0
    }

    LA_FILES="$(find "$PACKAGE_INSTALL_DIR/lib" -name "*.la")"

    [ -z "$LA_FILES" ] && {
        note "no .la files installed, skipped"
        return 0
    }

    for lafile in $LA_FILES
    do
        sed_in_place 's|-Wl,--strip-debug||g'      "$lafile"
        sed_in_place "s|-L${PPKG_HOME}[^' ]*||g"   "$lafile"
        sed_in_place "s|-R[^' ]*||g"               "$lafile"
        #sed_in_place "s|-L$SYSTEM_LIBRARY_DIR||g"  "$lafile"
        #sed_in_place "s|--sysroot $SYSROOT||g"     "$lafile"
    done
}

__adjust_pc_files_for_the_given_target() {
    [ -d "$PACKAGE_INSTALL_DIR/lib/pkgconfig" ] || {
        note "no .pc files installed, skipped"
        return 0
    }

    PC_FILES="$(find "$PACKAGE_INSTALL_DIR/lib/pkgconfig" -name "*.pc")"

    [ -z "$PC_FILES" ] && {
        note "no .pc files installed, skipped"
        return 0
    }

    # cc: error: unrecognized command line option â€˜-Râ€™
    for pcfile in $PC_FILES
    do
        sed_in_place "s|$PACKAGE_INSTALL_DIR|\${pcfiledir}/../..|g" "$pcfile"
        sed_in_place 's|-Wl,--strip-debug||g'      "$pcfile"
        sed_in_place "s|-L${PPKG_HOME}[^' ]*||g"   "$pcfile"
        sed_in_place "s|-R[^' ]*||g"               "$pcfile"
        sed_in_place "s|-pthread|-lpthread|g"      "$pcfile"
        #sed_in_place "s|-L$SYSTEM_LIBRARY_DIR||g"  "$pcfile"
        #sed_in_place "s|--sysroot $SYSROOT||"      "$pcfile"

        if grep 'Libs.private:' "$pcfile" > /dev/null ; then
            if grep 'Libs:' "$pcfile" > /dev/null ; then
                LIBS_PRIVATE_CONTENT=$(sed -n '/Libs.private:/p' "$pcfile" | cut -c14-)
                sed_in_place "/Libs:/s|\$|$LIBS_PRIVATE_CONTENT|" "$pcfile"
                sed_in_place '/Libs.private:/d' "$pcfile"
            else
                sed_in_place 's|Libs.private:|Libs:|' "$pcfile"
            fi
        fi

        if grep 'Requires.private:' "$pcfile" > /dev/null ; then
            if grep 'Requires:' "$pcfile" > /dev/null ; then
                REQUIRES_PRIVATE_CONTENT=$(sed -n '/Requires.private:/p' "$pcfile" | cut -c18-)
                sed_in_place "/Requires:/s|\$|$REQUIRES_PRIVATE_CONTENT|" "$pcfile"
                sed_in_place '/Requires.private:/d' "$pcfile"
            else
                sed_in_place 's|Requires.private:|Requires:|' "$pcfile"
            fi
        fi

        # https://github.com/mesonbuild/meson/issues/5390
        if [ "$NATIVE_OS_KIND" = openbsd ] ; then
            sed_in_place '/Libs:/s|-ldl||g'    "$pcfile"
            sed_in_place '/Libs:/s|-lrt||g'    "$pcfile"
            sed_in_place '/Libs:/s|-lcrypt||g' "$pcfile"
        fi
    done
}

install_incs() {
    while [ -n "$1" ]
    do
        unset X1
        unset X2
        X1=$(printf '%s\n' "$1" | cut -d: -f1)
        X2=$(printf '%s\n' "$1" | cut -d: -f2)

        if [ "$X1" = "$X2" ] ; then
            unset X2
        fi

        install -v -d           "$PACKAGE_INSTALL_DIR/include/$X2"
        install -v -m 644 "$X1" "$PACKAGE_INSTALL_DIR/include/$X2"

        shift
    done
}

install_libs() {
    install -v -d "$PACKAGE_INSTALL_DIR/lib"
    for item in "$@"
    do
        case $item in
            *.a) install -v -m 644 "$item" "$PACKAGE_INSTALL_DIR/lib" ;;
            *)   install -v -m 755 "$item" "$PACKAGE_INSTALL_DIR/lib" ;;
        esac
    done
}

install_pcfs() {
    install -v -d          "$PACKAGE_INSTALL_DIR/lib/pkgconfig" &&
    install -v -m 644 "$@" "$PACKAGE_INSTALL_DIR/lib/pkgconfig"
}

install_bins() {
    install -v -d          "$PACKAGE_INSTALL_DIR/bin" &&
    install -v -m 755 "$@" "$PACKAGE_INSTALL_DIR/bin"
}

install_etcs() {
    install -v -d          "$PACKAGE_INSTALL_DIR/etc" &&
    install -v -m 644 "$@" "$PACKAGE_INSTALL_DIR/etc"
}

install_mans() {
    for item in "$@"
    do
        unset NUMBER
        NUMBER=$(echo "$item" | cut -c ${#item}-${#item})
        case $NUMBER in
            [1-8]);;
            *)    abort 1 "$item: not a manpage."
        esac
        install -v -d             "$PACKAGE_INSTALL_DIR/share/man/man$NUMBER" &&
        install -v -m 644 "$item" "$PACKAGE_INSTALL_DIR/share/man/man$NUMBER"
    done
}

# install_completion <fish|bash|zsh> <COMMAND> <FILE-PATH>
  install_completion() {
    case $1 in
        bash)
            install -v -d          "$PACKAGE_INSTALL_DIR/share/bash/completions" &&
            install -v -m 644 "$3" "$PACKAGE_INSTALL_DIR/share/bash/completions/$2"
            ;;
        fish)
            install -v -d          "$PACKAGE_INSTALL_DIR/share/fish/vendor_completions.d" &&
            install -v -m 644 "$3" "$PACKAGE_INSTALL_DIR/share/fish/vendor_completions.d/$2.fish"
            ;;
        zsh)
            install -v -d          "$PACKAGE_INSTALL_DIR/share/zsh/site-functions" &&
            install -v -m 644 "$3" "$PACKAGE_INSTALL_DIR/share/zsh/site-functions/_$2"
            ;;
        *)  abort 1 "install_completion unsupported shell: $1"
    esac
}

install_pc_file() {
    install -v -d "$PACKAGE_INSTALL_DIR/lib/pkgconfig" &&
    cat >         "$PACKAGE_INSTALL_DIR/lib/pkgconfig/$1.pc"
}

# }}}
##############################################################################
# {{{ gow

gow() {
    if command -v bat > /dev/null ; then
        run "go env | bat --language=bash --paging=never --style=plain"
    else
        run "go env"
    fi

    printf '\n'

    # /Users/runner/go/pkg/mod/golang.org/x/sys@v0.0.0-20191028164358-195ce5e7f934/unix/syscall_darwin.1_13.go:25:3: //go:linkname must refer to declared function or variable
    if [ "$NATIVE_OS_KIND" = darwin ] ; then
        GOMOD="$PACKAGE_BSCRIPT_DIR/go.mod"

        if [ -f "$GOMOD" ] && go mod graph | grep -q 'golang\.org/x/sys' ; then
            run go get -u golang.org/x/sys

            if [ -d "$PACKAGE_BSCRIPT_DIR/vendor" ] ; then
                unset GO_VERSION_MAJOR
                unset GO_VERSION_MINOR

                GO_VERSION_MAJOR=$(go env GOVERSION | cut -c3- | cut -d. -f1)
                GO_VERSION_MINOR=$(go env GOVERSION | cut -c3- | cut -d. -f2)

                sed_in_place "/^go[[:space:]]*[1-9]\.[0-9][0-9]/c go $GO_VERSION_MAJOR.$GO_VERSION_MINOR" "$GOMOD"

                run go mod tidy
                run go mod vendor
            fi
        fi
    fi

    # https://pkg.go.dev/cmd/go
    # https://pkg.go.dev/cmd/link

    unset GO_BUILD_ARGS
    unset GO_BUILD_ARGV_V
    unset GO_BUILD_ARGV_X
    unset GO_BUILD_ARGV_O
    unset GO_BUILD_ARGV_MOD
    unset GO_BUILD_ARGV_TAGS
    unset GO_BUILD_ARGV_LDFLAGS

    unset GO_BUILD_ARGS_EXTRA

    while [ -n "$1" ]
    do
        case $1 in
            -v) shift ; GO_BUILD_ARGV_V='-v' ;;
            -x) shift ; GO_BUILD_ARGV_X='-x' ;;
            -o) shift ; GO_BUILD_ARGV_O="$1" ; shift ;;
            -X) shift
                if [ -z "$GO_BUILD_ARGV_LDFLAGS" ] ; then
                    GO_BUILD_ARGV_LDFLAGS="-X $1"
                else
                    GO_BUILD_ARGV_LDFLAGS="$GO_BUILD_ARGV_LDFLAGS -X $1"
                fi
                shift
                ;;
            -ldflags)
                shift
                if [ -z "$GO_BUILD_ARGV_LDFLAGS" ] ; then
                    GO_BUILD_ARGV_LDFLAGS="$1"
                else
                    GO_BUILD_ARGV_LDFLAGS="$1 $GO_BUILD_ARGV_LDFLAGS"
                fi
                shift
                ;;
            *)  GO_BUILD_ARGS_EXTRA="$GO_BUILD_ARGS_EXTRA $1" ; shift
        esac
    done

    GO_BUILD_ARGS='-trimpath'

    if [ -z "$GO_BUILD_ARGV_V" ] ; then
        if [ "$LOG_LEVEL" -gt 0 ] ; then
            GO_BUILD_ARGS="$GO_BUILD_ARGS -v"
        fi
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -v"
    fi

    if [ -z "$GO_BUILD_ARGV_X" ] ; then
        if [ "$LOG_LEVEL" -ge 2 ] ; then
            GO_BUILD_ARGS="$GO_BUILD_ARGS -x"
        fi
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -x"
    fi

    if [ "$BUILD_TYPE" = release ] ; then
        GO_BUILD_ARGV_LDFLAGS="$GO_BUILD_ARGV_LDFLAGS -s -w"
    fi

    if [ "$NATIVE_OS_KIND" != darwin ] ; then
        if [ "$LINK_TYPE" = static-only ] && [ "$CGO_ENABLED" -eq 1 ] ; then
            GO_BUILD_ARGV_LDFLAGS="$GO_BUILD_ARGV_LDFLAGS -linkmode external \"-extldflags=-static\""
        fi
    fi

    GO_BUILD_ARGS="$GO_BUILD_ARGS -ldflags '$GO_BUILD_ARGV_LDFLAGS'"

    if [ -z "$GO_BUILD_ARGV_O" ] ; then
        GO_BUILD_ARGS="$GO_BUILD_ARGS -o $PACKAGE_BCACHED_DIR/"
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -o $PACKAGE_BCACHED_DIR/$GO_BUILD_ARGV_O"
    fi

    GO_BUILD_ARGS="$GO_BUILD_ARGS $GO_BUILD_ARGS_EXTRA"

    # shellcheck disable=SC2086
    run go build $GO_BUILD_ARGS

    for item in $(ls "$PACKAGE_BCACHED_DIR")
    do
        case $item in
            *.a)  run install_libs "$PACKAGE_BCACHED_DIR/$item" ;;
            *.so) run install_libs "$PACKAGE_BCACHED_DIR/$item" ;;
            *)    run install_bins "$PACKAGE_BCACHED_DIR/$item" ;;
        esac
    done
}

# }}}
##############################################################################
# {{{ cargow

cargow() {
    run rustup target add "$RUST_TARGET"

    case $1 in
        build)
            # https://doc.rust-lang.org/cargo/commands/cargo-clean.html
            # https://doc.rust-lang.org/cargo/commands/cargo-build.html

            unset CARGO_BUILD_ARGS
            unset CARGO_BUILD_ARG_VV
            unset CARGO_BUILD_ARG_TARGET
            unset CARGO_BUILD_ARG_RELEASE

            for arg in "$@"
            do
                case $arg in
                    --vv)      CARGO_BUILD_ARG_VV='set'      ;;
                    --target)  CARGO_BUILD_ARG_TARGET='set'  ;;
                    --release) CARGO_BUILD_ARG_RELEASE='set' ;;
                esac
            done

            CARGO_BUILD_ARGS="$*"

            if [ -z "$CARGO_BUILD_ARG_VV" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS -vv"
            fi

            if [ -z "$CARGO_BUILD_ARG_RELEASE" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS --release"
            fi

            if [ -z "$CARGO_BUILD_ARG_TARGET" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS --target $RUST_TARGET"
            fi

            # shellcheck disable=SC2086
            run cargo clean && run cargo $CARGO_BUILD_ARGS
            ;;
        install)
            # https://doc.rust-lang.org/cargo/commands/cargo-clean.html
            # https://doc.rust-lang.org/cargo/commands/cargo-install.html

            unset CARGO_INSTALL_ARGS
            unset CARGO_INSTALL_ARG_TARGET
            unset CARGO_INSTALL_ARG_PATH
            unset CARGO_INSTALL_ARG_ROOT
            unset CARGO_INSTALL_ARG_VV

            for arg in "$@"
            do
                case $arg in
                    --target) CARGO_INSTALL_ARG_TARGET='set' ;;
                    --path)   CARGO_INSTALL_ARG_PATH='set'   ;;
                    --root)   CARGO_INSTALL_ARG_ROOT='set'   ;;
                    --vv)     CARGO_INSTALL_ARG_VV='set'     ;;
                esac
            done

            CARGO_INSTALL_ARGS="$*"

            if [ -z "$CARGO_INSTALL_ARG_VV" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS -vv"
            fi

            if [ -z "$CARGO_INSTALL_ARG_TARGET" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --target $RUST_TARGET"
            fi

            if [ -z "$CARGO_INSTALL_ARG_PATH" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --path $PACKAGE_BSCRIPT_DIR"
            fi

            if [ -z "$CARGO_INSTALL_ARG_ROOT" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --root=$PACKAGE_INSTALL_DIR"
            fi

            # shellcheck disable=SC2086
            run cargo clean && run cargo $CARGO_INSTALL_ARGS
            ;;
        cbuild|cinstall)
            unset CARGO_CINSTALL_ARGS
            unset CARGO_CINSTALL_ARG_Q
            unset CARGO_CINSTALL_ARG_V
            unset CARGO_CINSTALL_ARG_VV
            unset CARGO_CINSTALL_ARG_DEBUG
            unset CARGO_CINSTALL_ARG_RELEASE
            unset CARGO_CINSTALL_ARG_TARGET
            unset CARGO_CINSTALL_ARG_PREFIX

            for arg in "$@"
            do
                case $arg in
                    -q|--quiet)   CARGO_CINSTALL_ARG_Q='set'       ;;
                    -v|--verbose) CARGO_CINSTALL_ARG_V='set'       ;;
                    -vv)          CARGO_CINSTALL_ARG_VV='set'      ;;
                    --debug)      CARGO_CINSTALL_ARG_DEBUG='set'   ;;
                    --release)    CARGO_CINSTALL_ARG_RELEASE='set' ;;
                    --target)     CARGO_CINSTALL_ARG_TARGET='set'  ;;
                    --prefix)     CARGO_CINSTALL_ARG_PREFIX='set'  ;;
                esac
            done

            CARGO_CINSTALL_ARGS="$*"

            if [ -z "$CARGO_CINSTALL_ARG_Q" ] && [ -z "$CARGO_CINSTALL_ARG_V" ] && [ -z "$CARGO_CINSTALL_ARG_VV" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS -vv"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_DEBUG" ] && [ -z "$CARGO_CINSTALL_ARG_RELEASE" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --release"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_TARGET" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --target $RUST_TARGET"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_PREFIX" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --prefix $PACKAGE_INSTALL_DIR"
            fi

            # shellcheck disable=SC2086
            run cargo $CARGO_CINSTALL_ARGS
            ;;
        *) cargo "$@"
    esac
}

# }}}
##############################################################################
# {{{ configure

configure_only() {
    export FORCE_UNSAFE_CONFIGURE=1

    export ac_cv_func_malloc_0_nonnull=yes
    export ac_cv_func_calloc_0_nonnull=yes
    export ac_cv_func_realloc_0_nonnull=yes

    CONFIGURE_ARGS="--prefix='$PACKAGE_INSTALL_DIR' --disable-option-checking --enable-rpath --disable-nls --enable-largefile"

    if [ "$BUILD_TYPE" = release ] ; then
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-debug"
    else
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-debug"
    fi

    case $INSTALL_LIB in
        static) CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-static --disable-shared" ;;
        shared) CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-shared --disable-static" ;;
        both)   CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-static --enable-shared"  ;;
        no)     CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-static --disable-shared";;
    esac

    if [ -n "$PPKG_XTRACE" ] ; then
        sed_in_place '1a set -x' "$PACKAGE_BSCRIPT_DIR/configure"
    fi

    if run "$PACKAGE_BSCRIPT_DIR/configure" "$CONFIGURE_ARGS" "$@" ; then
        printf '\n'
    else
        if [ -f "$PACKAGE_BCACHED_DIR/config.log" ] ; then
            run cat "$PACKAGE_BCACHED_DIR/config.log"
        elif [ -f "$PACKAGE_BSCRIPT_DIR/config.log" ] ; then
            run cat "$PACKAGE_BSCRIPT_DIR/config.log"
        fi

        return 1
    fi

    if [ "$LOG_LEVEL" -ge 2 ] ; then
        for Makefile in $(find "$PACKAGE_BSCRIPT_DIR" -name Makefile)
        do
            sed_in_place 's|\t@|\t|g'     "$Makefile" || return 1
            sed_in_place 's|@echo|echo|g' "$Makefile" || return 1
        done

        unset Makefile
    fi
}

configure() {
    configure_only "$@" &&
    gmakew clean &&
    gmakew V=1   &&
    gmakew install
}

# }}}
##############################################################################
# {{{ gmakew

gmakew() {
    if [ "$LOG_LEVEL" -ge 3 ] ; then
        run "$GMAKE" "-j$BUILD_NJOBS" --debug "$@"
    else
        run "$GMAKE" "-j$BUILD_NJOBS" "$@"
    fi
}

# }}}
##############################################################################
# {{{ cmakew

# https://cmake.org/cmake/help/latest/command/enable_testing.html?highlight=build_testing
# https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling
# https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html
# https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html
#
# https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_IGNORE_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_PROGRAM_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_LIBRARY_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_INCLUDE_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_ROOT_PATH.html
#
# run in a subshell
cmakew() {
        echo "CMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE"
        cat > "$CMAKE_TOOLCHAIN_FILE" <<EOF
message(STATUS "CMake command: \${CMAKE_COMMAND}")
message(STATUS "CMake version: \${CMAKE_VERSION}")

message(STATUS "CMAKE_HOST_SYSTEM_NAME: \${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "     CMAKE_SYSTEM_NAME: \${CMAKE_SYSTEM_NAME}")

if ("\${BUILD_SHARED_LIBS}" STREQUAL "")
    set(BUILD_SHARED_LIBS $BUILD_SHARED_LIBS)
endif()

set(CMAKE_BUILD_TYPE  $CMAKE_BUILD_TYPE)

set(CMAKE_C_COMPILER "$CC")
set(CMAKE_C_FLAGS "$CPPFLAGS $CFLAGS")

set(CMAKE_CXX_COMPILER "$CXX")
set(CMAKE_CXX_FLAGS "$CPPFLAGS $CXXFLAGS")

set(CMAKE_ASM_COMPILER "$CC")

set(CMAKE_SHARED_LINKER_FLAGS "$(printf '%s\n' "$LDFLAGS" | sed -e 's|--static||g' -e 's|-static||g')")
set(CMAKE_EXE_LINKER_FLAGS    "$LDFLAGS")

set(CMAKE_C_COMPILER_AR     "$AR")
set(CMAKE_C_COMPILER_RANLIB "$RANLIB")

set(CMAKE_CXX_COMPILER_AR     "$AR")
set(CMAKE_CXX_COMPILER_RANLIB "$RANLIB")

set(CMAKE_AR      "$AR")
set(CMAKE_RANLIB  "$RANLIB")

set(CMAKE_LINKER  "$LD")

set(CMAKE_NM      "$NM")
set(CMAKE_READELF "$READELF")

set(CMAKE_OBJCOPY "$OBJCOPY")
set(CMAKE_OBJDUMP "$OBJDUMP")

set(CMAKE_STRIP   "$STRIP")

set(CMAKE_ADDR2LINE "$ADDR2LINE")

set(CMAKE_FIND_DEBUG_MODE $CMAKE_FIND_DEBUG_MODE)

set(CMAKE_FIND_ROOT_PATH "$CMAKE_FIND_ROOT_PATH")
EOF

    if [ "$LOG_LEVEL" -gt 0 ] ; then
        if command -v bat > /dev/null ; then
            run bat --language=cmake --paging=never --style=plain "$CMAKE_TOOLCHAIN_FILE"
        else
            run cat "$CMAKE_TOOLCHAIN_FILE"
        fi
    fi

    # https://cmake.org/cmake/help/latest/variable/CMAKE_PROJECT_INCLUDE.html

    CMAKE_PROJECT_INCLUDE="$PACKAGE_WORKING_DIR/project-after.cmake"

    # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_LIBRARY_SUFFIXES.html

    if [ "$NATIVE_OS_KIND" = darwin ] ; then
        case $LINK_TYPE in
            static-only)     printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")\n'          > "$CMAKE_PROJECT_INCLUDE" ;;
            static-prefered) printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ".dylib")\n' > "$CMAKE_PROJECT_INCLUDE" ;;
            shared-only)     printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib")\n'      > "$CMAKE_PROJECT_INCLUDE" ;;
            shared-prefered) printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib" ".a")\n' > "$CMAKE_PROJECT_INCLUDE" ;;
        esac
    else
        case $LINK_TYPE in
            static-only)     printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")\n'          > "$CMAKE_PROJECT_INCLUDE" ;;
            static-prefered) printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ".so")\n'    > "$CMAKE_PROJECT_INCLUDE" ;;
            shared-only)     printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".so")\n'         > "$CMAKE_PROJECT_INCLUDE" ;;
            shared-prefered) printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".so" ".a")\n'    > "$CMAKE_PROJECT_INCLUDE" ;;
        esac
    fi

    if [ "$LOG_LEVEL" -gt 0 ] ; then
        run cat "$CMAKE_PROJECT_INCLUDE"
    fi

    run "$CMAKE" \
        -Wno-dev \
        -DCMAKE_INSTALL_LIBDIR=lib \
        -DCMAKE_INSTALL_PREFIX="$PACKAGE_INSTALL_DIR" \
        -DCMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE" \
        -DCMAKE_PROJECT_INCLUDE="$CMAKE_PROJECT_INCLUDE" \
        -DCMAKE_VERBOSE_MAKEFILE="$CMAKE_VERBOSE_MAKEFILE" \
        -DCMAKE_COLOR_MAKEFILE="$CMAKE_COLOR_MAKEFILE" \
        -S "$PACKAGE_BSCRIPT_DIR" \
        -B "$PACKAGE_BCACHED_DIR" "$@" &&
    run "$CMAKE" --build   "$PACKAGE_BCACHED_DIR" -- "-j$BUILD_NJOBS" &&
    run "$CMAKE" --install "$PACKAGE_BCACHED_DIR"
}

# }}}
##############################################################################
# {{{ xmakew

# https://github.com/xmake-io/xmake/issues/2003
# run in a subshell
xmakew() {
    XMAKE_CONFIG_OPTIONS="$*"

    XMAKE_CONFIG_OPTION_CLEAN=
    XMAKE_CONFIG_OPTION_MODE=
    XMAKE_CONFIG_OPTION_vD=

    for arg in "$@"
    do
        case $arg in
            -c|--clean)  XMAKE_CONFIG_OPTION_CLEAN='set' ;;
            -m|--mode=*) XMAKE_CONFIG_OPTION_MODE='set'  ;;
            -vD)         XMAKE_CONFIG_OPTION_vD='set' ;;
        esac
    done

    if [ "$LOG_LEVEL" -ge 3 ] && [ -z "$XMAKE_CONFIG_OPTION_vD" ]; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTION_vD -vD"
    fi

    if [ -z "$XMAKE_CONFIG_OPTION_CLEAN" ] ; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --clean"
    fi

    if [ -z "$XMAKE_CONFIG_OPTION_MODE" ] ; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --mode=$BUILD_TYPE"
    fi

    run "$XMAKE" config "$XMAKE_CONFIG_OPTIONS" "--project=$PACKAGE_BSCRIPT_DIR" "--buildir=$PACKAGE_BCACHED_DIR" &&
    run "$XMAKE" "--jobs=$BUILD_NJOBS" &&
    run "$XMAKE" install -o "$PACKAGE_INSTALL_DIR"
}

# }}}
##############################################################################
# {{{ mesonw

# https://mesonbuild.com/Cross-compilation.html
# run in a subshell
mesonw() {
    unset MESON_BUILD_DEFAULT_LIBRARY

    case $INSTALL_LIB in
        static|shared|both) MESON_BUILD_DEFAULT_LIBRARY="$INSTALL_LIB"
    esac

    MESON_NATIVE_FILE="$PACKAGE_BCACHED_DIR/native-file.ini"

    cat > "$MESON_NATIVE_FILE" <<EOF
[binaries]
c = '$CC'
cpp = '$CXX'
ar = '$AR'
strip = '$STRIP'

[built-in options]
c_args = $(to_meson_array $CFLAGS $CPPFLAGS)
c_link_args = $(to_meson_array $LDFLAGS)
cpp_args = $(to_meson_array $CXXFLAGS $CPPFLAGS)
cpp_link_args = $(to_meson_array $LDFLAGS)
EOF

    run "$MESON" setup \
        --prefix="$PACKAGE_INSTALL_DIR" \
        --buildtype="$BUILD_TYPE" \
        --backend=ninja \
        --pkg-config-path="$PKG_CONFIG_PATH" \
        --native-file="$MESON_NATIVE_FILE" \
        -Ddefault_library="$MESON_BUILD_DEFAULT_LIBRARY" \
        -Dlibdir=lib \
        "$@" "$PACKAGE_BCACHED_DIR" "$PACKAGE_BSCRIPT_DIR" &&
    run "$NINJA" -C "$PACKAGE_BCACHED_DIR" &&
    run "$NINJA" -C "$PACKAGE_BCACHED_DIR" install
}

to_meson_array() {
    RESULT=

    for item in "$@"
    do
        if [ -z "$RESULT" ] ; then
            RESULT="'$item'"
        else
            RESULT="$RESULT, '$item'"
        fi
    done

    printf '[%s]\n' "$RESULT"
}

__install_the_given_package "$PACKAGE_NAME"

# }}}
##############################################################################
# {{{ vim operation

# last line mode :set foldmethod=marker
# command mode zM  fold close all
# command mode zR  fold open all
