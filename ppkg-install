
COLOR_RED='\033[0;31m'          # Red
COLOR_GREEN='\033[0;32m'        # Green
COLOR_YELLOW='\033[0;33m'       # Yellow
COLOR_BLUE='\033[0;94m'         # Blue
COLOR_PURPLE='\033[0;35m'       # Purple
COLOR_OFF='\033[0m'             # Reset

print() {
    printf '%b' "$*"
}

echo() {
    printf '%b\n' "$*"
}

note() {
    printf '%b\n' "${COLOR_YELLOW}ðŸ””  $*${COLOR_OFF}" >&2
}

warn() {
    printf '%b\n' "${COLOR_YELLOW}ðŸ”¥  $*${COLOR_OFF}" >&2
}

success() {
    printf '%b\n' "${COLOR_GREEN}[âœ”] $*${COLOR_OFF}" >&2
}

error() {
    printf '%b\n' "${COLOR_RED}ðŸ’”  $*${COLOR_OFF}" >&2
}

die() {
    printf '%b\n' "${COLOR_RED}ðŸ’”  $*${COLOR_OFF}" >&2
    exit 1
}

bppend_to_PATH() {
    case ":${PATH}:" in
        *:"$1":*) ;;
        *) export PATH="$1:$PATH" ;;
    esac
}

step() {
    STEP_NUM=$(expr ${STEP_NUM-0} + 1)
    STEP_MESSAGE="$@"
    printf '%s\n'
    printf '%b\n' "${COLOR_PURPLE}=>> STEP ${STEP_NUM} : ${STEP_MESSAGE} ${COLOR_OFF}"
}

step2() {
    STEP2_NUM=$(expr ${STEP2_NUM-0} + 1)
    STEP2_MESSAGE="$@"
    printf '%s\n'
    printf '%b\n' "${COLOR_BLUE}>>> STEP ${STEP_NUM}.${STEP2_NUM} : ${STEP2_MESSAGE} ${COLOR_OFF}"
}

run() {
    if [ "$RUN_SILENT" != yes ] ; then
        echo "${COLOR_PURPLE}==>${COLOR_OFF} ${COLOR_GREEN}$@${COLOR_OFF}"
    fi

    eval "$*"
}

list() {
    for item in $@
    do
        printf '%s\n' "$item"
    done
}

list_length() {
    printf '%s\n' $#
}

shiftn() {
    shift "$1" && shift && printf '%s\n' "$@"
}

globing() {
    case $1 in
        '')   ;;
        \~/*) printf '%s\n' "$HOME/$(printf '%s\n' "$1" | cut -c3-)" ;;
        *)    printf '%s\n' "$1"
    esac
}

sed_in_place() {
    if command -v gsed > /dev/null ; then
        unset SED_IN_PLACE_ACTION
        SED_IN_PLACE_ACTION="$1"
        shift
        # contains ' but not contains \'
        if printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" " "' | grep -q 27 && ! printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" ""' | grep -q '5C 27' ; then
            run gsed -i "\"$SED_IN_PLACE_ACTION\"" $@
        else
            run gsed -i "'$SED_IN_PLACE_ACTION'" $@
        fi
    elif command -v sed  > /dev/null ; then
        if sed -i 's/a/b/g' $(mktemp) 2> /dev/null ; then
            unset SED_IN_PLACE_ACTION
            SED_IN_PLACE_ACTION="$1"
            shift
            if printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" " "' | grep -q 27 && ! printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" ""' | grep -q '5C 27' ; then
                run sed -i "\"$SED_IN_PLACE_ACTION\"" $@
            else
                run sed -i "'$SED_IN_PLACE_ACTION'" $@
            fi
        else
            unset SED_IN_PLACE_ACTION
            SED_IN_PLACE_ACTION="$1"
            shift
            if printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" " "' | grep -q 27 && ! printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" ""' | grep -q '5C 27' ; then
                run sed -i '""' "\"$SED_IN_PLACE_ACTION\"" $@
            else
                run sed -i '""' "'$SED_IN_PLACE_ACTION'" $@
            fi
        fi
    else
        error "please install sed utility."
        return 1
    fi
}

getvalue() {
    if [ $# -eq 0 ] ; then
        cut -d= -f2
    else
        printf '%s\n' "$1" | cut -d= -f2
    fi
}

git() {
    if [ -f "$MY_CORE_DIR/etc/ssl/certs/cacert.pem" ] ; then
        command git -c http.sslCAInfo="$MY_CORE_DIR/etc/ssl/certs/cacert.pem" $*
    else
        command git $*
    fi
}

own() {
    ls -ld "$1" | cut -d ' ' -f3,4 | tr ' ' ':'
}

is_integer() {
    case "${1#[+-]}" in
        (*[!0123456789]*) return 1 ;;
        ('')              return 1 ;;
        (*)               return 0 ;;
    esac
}

# format_unix_timestamp <TIMESTAMP-UNIX> <TO-FORMAT> [-u]
  format_unix_timestamp() {
   date $3 -jf "%s" "$1" "$2" 2> /dev/null ||
   date $3 -d      "@$1" "$2"
}

# }}}
##############################################################################
# {{{ version

version_sort() {
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sort.html
    # https://man.netbsd.org/NetBSD-8.1/i386/sort.1
    #
    # sort: unrecognized option: V
    # BusyBox v1.29.3 (2019-01-24 07:45:07 UTC) multi-call binary.
    # Usage: sort [-nrugMcszbdfiokt] [-o FILE] [-k start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...
    if  printf '%s\n' | (sort -V > /dev/null 2>&1) ; then
        printf '%s\n' "$@" | tr ' ' '\n' | sort -V
    else
        printf '%s\n' "$@" | tr ' ' '\n' | sort -t. -n -k1,1 -k2,2 -k3,3 -k4,4
    fi
}

# check if match the condition
#
# condition:
# eq  equal
# ne  not equal
# gt  greater than
# lt  less than
# ge  greater than or equal
# le  less than or equal
#
# examples:
# version_match 1.15.3 eq 1.16.0
# version_match 1.15.3 lt 1.16.0
# version_match 1.15.3 gt 1.16.0
# version_match 1.15.3 le 1.16.0
# version_match 1.15.3 ge 1.16.0
version_match() {
    case $2 in
        eq)  [ "$1"  = "$3" ] ;;
        ne)  [ "$1" != "$3" ] ;;
        le)
            if [ "$1" = "$3" ] ; then
                return 0
            fi
            [ "$1" = "$(version_sort "$1" "$3" | head -n 1)" ]
            ;;
        ge)
            if [ "$1" = "$3" ] ; then
                return 0
            fi
            [ "$1" = "$(version_sort "$1" "$3" | tail -n 1)" ]
            ;;
        lt)
            if [ "$1" = "$3" ] ; then
                return 1
            fi
            [ "$1" = "$(version_sort "$1" "$3" | head -n 1)" ]
            ;;
        gt)
            if [ "$1" = "$3" ] ; then
                return 1
            fi
            [ "$1" = "$(version_sort "$1" "$3" | tail -n 1)" ]
            ;;
        *)  error "version_compare: $2: not supported operator." ; return 1
    esac
}

__adjust_elf_files_for_the_given_target() {
    # run patchelf --version
    # run command -v patchelf

    for x in bin sbin lib libexec
    do
        [ -d "$PACKAGE_INSTALL_DIR/$x" ] || continue

        for BASE64_ENCODED_RELATIVE_FILEPATH in $(cd "$PACKAGE_INSTALL_DIR/$x" && find -not -name . -type f -exec $PPKG_COMMAND_PATH util-base64-encode-string '{}' \;)
        do
            unset BASE64_DECODED_RELATIVE_FILEPATH
            BASE64_DECODED_RELATIVE_FILEPATH="$($PPKG_COMMAND_PATH util-base64-decode-to-string "$BASE64_ENCODED_RELATIVE_FILEPATH")"

            FILEPATH="$PACKAGE_INSTALL_DIR/$x/${BASE64_DECODED_RELATIVE_FILEPATH#./}"

            [ -w "$FILEPATH" ] || continue

            unset FILE_HEADER_ACTUAL

            FILE_HEADER_ACTUAL="$(hexdump -n 18 -v -e '1/1 "%02X" ""' "$FILEPATH")"

            ELF_EXECUTABLE=no
            ELF_SHAREDABLE=no

            # http://www.sco.com/developers/gabi/latest/ch4.eheader.html
            case $FILE_HEADER_ACTUAL in
                7F454C460[12]01010[039]00000000000000000100)
                    continue
                    ;;
                7F454C460[12]01010[039]00000000000000000200)
                    # little-endian mode
                    ELF_EXECUTABLE=yes
                    ;;
                7F454C460[12]01010[039]00000000000000000300)
                    # little-endian mode
                    ELF_SHAREDABLE=yes
                    ;;
                7F454C460[12]02010[039]00000000000000000001)
                    continue
                    ;;
                7F454C460[12]02010[039]00000000000000000002)
                    # big-endian mode
                    ELF_EXECUTABLE=yes
                    ;;
                7F454C460[12]02010[039]00000000000000000003)
                    # big-endian mode
                    ELF_SHAREDABLE=yes
                    ;;
                7F454C46*)
                    die "mismached ELF header: $FILEPATH, $FILE_HEADER_ACTUAL"
                    ;;
                *)  continue
            esac

            # https://github.com/NixOS/patchelf/issues/371

            if [ "$BUILD_TYPE" = release ] ; then
                if [ "$x" != lib ] ; then
                    run "$STRIP" $STRIP_ARG "$FILEPATH" || true
                fi
            fi

            if [ "$ELF_EXECUTABLE" = yes ] || [ "$ELF_SHAREDABLE" = yes ] ; then
                unset DT_NEEDED
                DT_NEEDED=$(patchelf --print-needed "$FILEPATH" 2>/dev/null || true)

                unset DT_RUNPATH
                DT_RUNPATH=$(patchelf --print-rpath "$FILEPATH" 2>/dev/null | tr ':' ' ')

                if [ -n "$DT_RUNPATH" ] ; then
                    run patchelf --remove-rpath "$FILEPATH"
                fi

                unset RUNPATH

                PACKAGE_LIBRARY_DIR="$PACKAGE_INSTALL_DIR/lib"

                if [ -d "$PACKAGE_LIBRARY_DIR" ] ; then
                    for NEEDED in $DT_NEEDED
                    do
                        if [ -e "$PACKAGE_LIBRARY_DIR/$NEEDED" ] ; then
                            RUNPATH="$PACKAGE_LIBRARY_DIR"
                            break
                        fi
                    done
                fi

                for NEEDED in $DT_NEEDED
                do
                    case $NEEDED in
                        libc.so.6) ;;
                        libm.so.6) ;;
                        libgcc_s.so.1) ;;
                        ld-linux-x86-64.so.2) ;;
                        *)  for LIBDIR in $DT_RUNPATH
                            do
                                if [ "$LIBDIR" = "$PACKAGE_LIBRARY_DIR" ] ; then
                                    continue
                                fi

                                if [ "$LIBDIR" = "$PACKAGE_INSTALLING_LIB_DIR" ] ; then
                                    continue
                                fi

                                if [ -e "$LIBDIR/$NEEDED" ] ; then
                                    if [ -z "$RUNPATH" ] ; then
                                        RUNPATH="$LIBDIR"
                                    else
                                        RUNPATH="$RUNPATH:$LIBDIR"
                                    fi
                                    break
                                fi
                            done
                    esac
                done

                if [ -n "$RUNPATH" ] ; then
                    run patchelf --set-rpath "$RUNPATH" "$FILEPATH"
                fi
            fi
        done
    done
}

__adjust_mach_o_files_for_the_given_target() {
    for x in bin sbin lib libexec
    do
        [ -d "$PACKAGE_INSTALL_DIR/$x" ] || continue

        for BASE64_ENCODED_RELATIVE_FILEPATH in $(cd "$PACKAGE_INSTALL_DIR/$x" && find . -not -name . -type f -exec $PPKG_COMMAND_PATH $PPKG_COMMAND_PATH util-base64-encode-string '{}' \;)
        do
            unset BASE64_DECODED_RELATIVE_FILEPATH
            BASE64_DECODED_RELATIVE_FILEPATH="$($PPKG_COMMAND_PATH util-base64-decode-to-string "$BASE64_ENCODED_RELATIVE_FILEPATH")"

            FILEPATH="$PACKAGE_INSTALL_DIR/$x/${BASE64_DECODED_RELATIVE_FILEPATH#./}"

            unset FILE_HEADER_ACTUAL
            FILE_HEADER_ACTUAL="$(hexdump -n 16 -v -e '1/1 "%02X" ""' "$FILEPATH")"

            # https://github.com/aidansteele/osx-abi-macho-file-format-reference
            case $FILE_HEADER_ACTUAL in
                CFFAEDFE0C000001000000000[26]000000)
                    # arm64
                    ;;
                CFFAEDFE07000001030000000[26]000000)
                    # x86_64
                    ;;
                *)  continue
            esac

            unset DT_SONAME
            DT_SONAME=$( otool -l "$FILEPATH" | grep LC_ID_DYLIB   -A2 | grep name | sed 's|^[[:space:]]*||' | cut -d ' ' -f2)

            unset DT_NEEDED
            DT_NEEDED=$( otool -l "$FILEPATH" | grep LC_LOAD_DYLIB -A2 | grep name | sed 's|^[[:space:]]*||' | cut -d ' ' -f2)

            unset DT_RUNPATH
            DT_RUNPATH=$(otool -l "$FILEPATH" | grep LC_RPATH      -A2 | grep path | sed 's|^[[:space:]]*||' | cut -d ' ' -f2)

            if [ -z "$DT_NEEDED" ] ; then
                die "no dependent shared libraries found in $FILEPATH"
            fi

            echo "DT_SONAME=\n$DT_SONAME"
            echo "DT_NEEDED=\n$DT_NEEDED"
            echo "DT_RUNPATH=\n$DT_RUNPATH"

            case $DT_SONAME in
                '') ;;
                @*) ;;
                /*) ;;
                lib*.dylib) run install_name_tool -id "@rpath/$DT_SONAME" "$FILEPATH"
            esac

            for NEEDED in $DT_NEEDED
            do
                case $NEEDED in
                    lib*.dylib)
                        run install_name_tool -change "$NEEDED" "@rpath/$NEEDED" "$FILEPATH"
                esac
            done

            if [ "$BUILD_TYPE" = release ] ; then
                if [ "$x" != lib ] ; then
                    run "$STRIP" $STRIP_ARG "$FILEPATH" || true
                fi
            fi
        done
    done
}

__export_relevant_environment_variables() {
    step "export relevant environment variables"

    STATIC_LIBRARY_SUFFIX=.a

    if [ "$NATIVE_OS_KIND" = 'darwin' ] ; then
        SHARED_LIBRARY_SUFFIX=.dylib
    else
        SHARED_LIBRARY_SUFFIX=.so
    fi

    CCFLAGS="-fPIC -fno-common $CFLAGS"
    XXFLAGS="-fPIC -fno-common $CXXFLAGS"

    for item in $PACKAGE_CDEFINE
    do
        CPPFLAGS="$CPPFLAGS -D$item"
    done

    if [ -n "$PACKAGE_CCFLAGS" ] ; then
        CCFLAGS="$CCFLAGS $PACKAGE_CCFLAGS"
    fi

    if [ -n "$PACKAGE_XXFLAGS" ] ; then
        XXFLAGS="$XXFLAGS $PACKAGE_XXFLAGS"
    fi

    if [ -n "$PACKAGE_LDFLAGS" ] ; then
        LDFLAGS="$LDFLAGS $PACKAGE_LDFLAGS"
    fi

    CCFLAGS="$(printf '%s\n' "$CCFLAGS" | sed -e 's|--static||g' -e 's|-static||g')"
    XXFLAGS="$(printf '%s\n' "$XXFLAGS" | sed -e 's|--static||g' -e 's|-static||g')"
    LDFLAGS="$(printf '%s\n' "$LDFLAGS" | sed -e 's|--static||g' -e 's|-static||g')"

    ##################################################################################

    if [ "$NATIVE_OS_KIND" = 'darwin' ] ; then
        unset DEVELOPER_DIR; DEVELOPER_DIR="$(xcode-select -p)"

        if [ -d  "$DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin" ] ; then
            PATH="$DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin:$PATH"
        else
            PATH="$DEVELOPER_DIR/usr/bin:$PATH"
        fi

        # $MY_CORE_BIN_DIR must before DEVELOPER_DIR/bin , because some tools shipped with sdk are too old.
        PATH="$MY_CORE_BIN_DIR:$PATH"

        # If -mmacosx-version-min is unspecified, the default deployment target is read from MACOSX_DEPLOYMENT_TARGET environment variable. This option only affects Darwin targets.
        # https://clang.llvm.org/docs/CommandGuide/clang.html#envvar-MACOSX_DEPLOYMENT_TARGET
        # https://clang.llvm.org/docs/CommandGuide/clang.html#cmdoption-mmacosx-version-min
        if [ -z "$MACOSX_DEPLOYMENT_TARGET" ] ; then
            MACOSX_DEPLOYMENT_TARGET="$(printf '%s\n' "$NATIVE_OS_VERS" | cut -d. -f1).$(printf '%s\n' "$NATIVE_OS_VERS" | cut -d. -f2)"
        fi

        export MACOSX_DEPLOYMENT_TARGET

        if [ -d     "$DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" ] ; then
            SDKROOT="$DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
        else
            SDKROOT="$DEVELOPER_DIR/SDKs/MacOSX.sdk"
        fi

        # https://keith.github.io/xcode-man-pages/xcrun.1.html
        # https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_SYSROOT.html
        export SDKROOT

        CPPFLAGS="-isysroot $SDKROOT -Qunused-arguments $CPPFLAGS"
         CCFLAGS="-isysroot $SDKROOT -Qunused-arguments  $CCFLAGS"
         XXFLAGS="-isysroot $SDKROOT -Qunused-arguments  $XXFLAGS"
         LDFLAGS="-isysroot $SDKROOT -Wl,-search_paths_first $LDFLAGS"
    else
        if [ "$LINK_TYPE" = static-only ] ; then
            LDFLAGS="-static --static $LDFLAGS"
        fi
        # https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html
        LDFLAGS="$LDFLAGS -Wl,--as-needed -Wl,-z,muldefs -Wl,--allow-multiple-definition"
    fi

    if [ "$VERBOSE_LEVEL" -ge 3 ] ; then
        CCFLAGS="$CCFLAGS -v"
        XXFLAGS="$XXFLAGS -v"
        LDFLAGS="$LDFLAGS -Wl,-v"
    fi

    if [ "$BUILD_TYPE" = release ] ; then
       CPPFLAGS="$CPPFLAGS -DNDEBUG"
        CCFLAGS="$CCFLAGS -Os"
        XXFLAGS="$XXFLAGS -Os"
        LDFLAGS="$LDFLAGS -Wl,-S"
    fi

    for TOOLNAME in $(list_tools_in_the_toolchain)
    do
        unset TOOLNAME_UPPERCASE
        TOOLNAME_UPPERCASE=$(printf '%s\n' "$TOOLNAME" | tr a-z A-Z)

        unset TOOLPATH
        TOOLPATH="$(eval echo \$${TOOLNAME_UPPERCASE})"

        if [ -z "$TOOLPATH" ] ; then
            case $TOOLNAME in
                cc)  TOOLPATH="$(command -v cc  || command -v gcc || command -v clang   || true)" ;;
                cxx) TOOLPATH="$(command -v c++ || command -v g++ || command -v clang++ || true)" ;;
                cpp) TOOLPATH="$CC -E" ;;
                *)   TOOLPATH="$(command -v "$TOOLNAME" || true)"
            esac
        fi

        # if [ -z "$TOOLPATH" ] ; then
        #     die "$TOOLNAME is not found."
        # fi

        # if [ "$TOOLNAME" != cpp ] ; then
        #     [ -e "$TOOLPATH" ] || die "file is not exist: $TOOLPATH"
        #     [ -x "$TOOLPATH" ] || die "file is not executable: $TOOLPATH"
        # fi

        eval export "${TOOLNAME_UPPERCASE}='$TOOLPATH'"
    done

    unset TOOLNAME_UPPERCASE
    unset TOOLNAME
    unset TOOLPATH

    ##################################################################################

    cat > "$PACKAGE_INSTALLING_BIN_DIR/test.c" <<EOF
int main() {
    return 0;
}
EOF
    cat > "$PACKAGE_INSTALLING_BIN_DIR/test.cc" <<EOF
int main() {
    return 0;
}
EOF

    if $CC  $CPPFLAGS -Wno-error=unused-command-line-argument -o "$PACKAGE_INSTALLING_BIN_DIR/a.out" "$PACKAGE_INSTALLING_BIN_DIR/test.c" 2>/dev/null ; then
        CCFLAGS="$CCFLAGS -Wno-error=unused-command-line-argument"
    fi

    if $CXX $CPPFLAGS -Wno-error=unused-command-line-argument -o "$PACKAGE_INSTALLING_BIN_DIR/a.out" "$PACKAGE_INSTALLING_BIN_DIR/test.cc" 2>/dev/null ; then
        XXFLAGS="$XXFLAGS -Wno-error=unused-command-line-argument"
    fi

    ##################################################################################

    export PROXIED_CC="$CC"
    export PROXIED_CXX="$CXX"

     CC="$MY_CORE_BIN_DIR/proxy-cc"
    CXX="$MY_CORE_BIN_DIR/proxy-c++"

    cat > "$CC.c" <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

int main(int argc, char * argv[]) {
    char * PROXIED_PROGRAM = NULL;

    if (argv[0][strlen(argv[0]) - 1] == '+') {
        PROXIED_PROGRAM = getenv("PROXIED_CXX");

        if (PROXIED_PROGRAM == NULL) {
            fprintf(stderr, "PROXIED_CXX environment variable is not set.\n");
            return 2;
        }
    } else {
        PROXIED_PROGRAM = getenv("PROXIED_CC");

        if (PROXIED_PROGRAM == NULL) {
            fprintf(stderr, "PROXIED_CC environment variable is not set.\n");
            return 2;
        }
    }

    if (argc > 1) {
        const char * options[5] = { "-shared", "-static", "--static", "-Wl,-Bdynamic", "-pie" };
              int    indexes[5] = {    -1,         -1,        -1,            -1,         -1   };

        for (int i = 1; i < argc; i++) {
            for (int j = 0; j < 5; j++) {
                if (strcmp(argv[i], options[j]) == 0) {
                    indexes[j] = i;
                }

                if (indexes[0] > 0) {
                    if ((indexes[1] > 0) && (indexes[2] > 0) && (indexes[4] > 0)) {
                        goto lable;
                    }
                }
            }
        }

        lable:
        // printf("      -shared = %d\n", indexes[0]);
        // printf("      -static = %d\n", indexes[1]);
        // printf("     --static = %d\n", indexes[2]);
        // printf("-Wl,-Bdynamic = %d\n", indexes[3]);
        // printf("         -pie = %d\n", indexes[4]);

        // if -shared option is passed, then remove -static , --static , -pie options if they also are passed
        if (indexes[0] > 0) {
            if (indexes[1] > 0) {
                argv[indexes[1]] = (char*)"-shared";
            }
            if (indexes[2] > 0) {
                argv[indexes[2]] = (char*)"-shared";
            }
            if (indexes[4] > 0) {
                argv[indexes[4]] = (char*)"-shared";
            }
        } else {
            // if -shared option is not passed, but -static or --static option is passed, then remove -pie , -Wl,-Bdynamic option if it also is passed
            if ((indexes[1] > 0) || (indexes[2] > 0)) {
                if (indexes[3] > 0) {
                    argv[indexes[3]] = (char*)"-static";
                }
                if (indexes[4] > 0) {
                    argv[indexes[4]] = (char*)"-static";
                }
            }
        }
    }

    argv[0] = PROXIED_PROGRAM;

    // for (int i = 0; argv[i] != NULL; i++) {
    //     printf("%s ", argv[i]);
    // }
    // printf("\n");

    if (PROXIED_PROGRAM[0] == '/') {
        if (execv(PROXIED_PROGRAM, argv) == -1) {
            perror(PROXIED_PROGRAM);
            return 1;
        }
    } else {
        if (execvp(PROXIED_PROGRAM, argv) == -1) {
            fprintf(stderr, "command not found: %s\b", PROXIED_PROGRAM);
            return 1;
        }
    }

    return 0;
}
EOF

    run $PROXIED_CC $CPPFLAGS -std=c99 -o "$CC" "$CC.c"
    run ln -sf "$CC" "$CXX"

    ##################################################################################

    # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_ROOT_PATH.html
    unset CMAKE_FIND_ROOT_PATH

    # https://doc.rust-lang.org/rustc/codegen-options/index.html#link-arg
    unset RUSTFLAGS

    for DEP_PKG_NAME in $RECURSIVE_DEPENDENT_PACKAGES
    do
        DEP_PKG_NAME_UNDERSCORE=$(printf "$DEP_PKG_NAME" | tr '@+-.' '_')

        unset DEP_PKG_INSTALL_DIR
        unset DEP_PKG_BINARY__DIR
        unset DEP_PKG_INCLUDE_DIR
        unset DEP_PKG_LIBRARY_DIR
        unset DEP_PKG_PKGCONF_DIR

        DEP_PKG_INSTALL_DIR="$MY_INSTALLED_DIR/$DEP_PKG_NAME"
        DEP_PKG_BINARY__DIR="$DEP_PKG_INSTALL_DIR/bin"
        DEP_PKG_INCLUDE_DIR="$DEP_PKG_INSTALL_DIR/include"
        DEP_PKG_LIBRARY_DIR="$DEP_PKG_INSTALL_DIR/lib"
        DEP_PKG_PKGCONF_DIR="$DEP_PKG_INSTALL_DIR/lib/pkgconfig"

        eval "${DEP_PKG_NAME_UNDERSCORE}_INSTALL_DIR='$DEP_PKG_INSTALL_DIR'"
        eval "${DEP_PKG_NAME_UNDERSCORE}_BINARY__DIR='$DEP_PKG_BINARY__DIR'"
        eval "${DEP_PKG_NAME_UNDERSCORE}_INCLUDE_DIR='$DEP_PKG_INCLUDE_DIR'"
        eval "${DEP_PKG_NAME_UNDERSCORE}_LIBRARY_DIR='$DEP_PKG_LIBRARY_DIR'"

        if [ -d  "$DEP_PKG_BINARY__DIR" ] ; then
            PATH="$DEP_PKG_BINARY__DIR:$PATH"
        fi

        if [ -d "$DEP_PKG_INCLUDE_DIR" ] ; then
            CPPFLAGS="-I$DEP_PKG_INCLUDE_DIR $CPPFLAGS"
        fi

        if [ -d "$DEP_PKG_LIBRARY_DIR" ] ; then
            LDFLAGS="-L$DEP_PKG_LIBRARY_DIR -Wl,-rpath,$DEP_PKG_LIBRARY_DIR $LDFLAGS"
            RUSTFLAGS="-Clink-arg=-L$DEP_PKG_LIBRARY_DIR -Clink-arg=-Wl,-rpath,$DEP_PKG_LIBRARY_DIR $RUSTFLAGS"
        fi

        if [ -d "$DEP_PKG_PKGCONF_DIR" ] ; then
            if [ -z "$PKG_CONFIG_PATH" ] ; then
                PKG_CONFIG_PATH="$DEP_PKG_PKGCONF_DIR"
            else
                PKG_CONFIG_PATH="$DEP_PKG_PKGCONF_DIR:$PKG_CONFIG_PATH"
            fi
        else
            DEP_PKG_PKGCONF_DIR="$DEP_PKG_INSTALL_DIR/share/pkgconfig"

            if [ -d "$DEP_PKG_PKGCONF_DIR" ] ; then
                if [ -z "$PKG_CONFIG_PATH" ] ; then
                    PKG_CONFIG_PATH="$DEP_PKG_PKGCONF_DIR"
                else
                    PKG_CONFIG_PATH="$DEP_PKG_PKGCONF_DIR:$PKG_CONFIG_PATH"
                fi
            fi
        fi

        if [ -z "$CMAKE_FIND_ROOT_PATH" ] ; then
            CMAKE_FIND_ROOT_PATH="$DEP_PKG_INSTALL_DIR"
        else
            CMAKE_FIND_ROOT_PATH="$CMAKE_FIND_ROOT_PATH;$DEP_PKG_INSTALL_DIR"
        fi

        DEP_PKG_ACLOCAL_PATH="$DEP_PKG_INSTALL_DIR/share/aclocal"

        if [ -d "$DEP_PKG_ACLOCAL_PATH" ] ; then
            if [ -z "$ACLOCAL_PATH" ] ; then
                ACLOCAL_PATH="$DEP_PKG_ACLOCAL_PATH"
            else
                ACLOCAL_PATH="$DEP_PKG_ACLOCAL_PATH:$ACLOCAL_PATH"
            fi
        fi

        # https://gi.readthedocs.io/en/latest/tools/g-ir-scanner.html#environment-variables
        if [ -d "$DEP_PKG_INSTALL_DIR/share/gir-1.0" ] ; then
            if [ -z "$XDG_DATA_DIRS" ] ; then
                XDG_DATA_DIRS="$DEP_PKG_INSTALL_DIR/share"
            else
                XDG_DATA_DIRS="$DEP_PKG_INSTALL_DIR/share:$XDG_DATA_DIRS"
            fi
        fi

        # https://help.gnome.org/admin//system-admin-guide/2.32/mimetypes-database.html.en
        if [ -d "$DEP_PKG_INSTALL_DIR/share/mime" ] ; then
            if [ -z "$XDG_DATA_DIRS" ] ; then
                XDG_DATA_DIRS="$DEP_PKG_INSTALL_DIR/share"
            else
                XDG_DATA_DIRS="$DEP_PKG_INSTALL_DIR/share:$XDG_DATA_DIRS"
            fi
        fi

        if [ "$DEP_PKG_NAME" = docbook ] ; then
            # http://xmlsoft.org/xslt/xsltproc.html
            export XML_CATALOG_FILES="$docbook_INSTALL_DIR/catalog.xml"
        fi
    done

    CPPFLAGS="-I$PACKAGE_INSTALLING_INC_DIR $CPPFLAGS"
     LDFLAGS="-L$PACKAGE_INSTALLING_LIB_DIR $LDFLAGS"

    # https://doc.rust-lang.org/rustc/codegen-options/index.html#link-arg
    export RUSTFLAGS="-Clinker=$CC -Clink-arg=-L$PACKAGE_INSTALLING_TOP_DIR/lib $RUSTFLAGS"

    export PATH="$PACKAGE_INSTALLING_BIN_DIR:$PATH"

    # https://www.gnu.org/software/automake/manual/html_node/Macro-Search-Path.html
    export ACLOCAL_PATH
    export PKG_CONFIG_PATH

    # https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
    export XDG_DATA_DIRS

    case $NATIVE_OS_KIND in
        netbsd)
            printf '%s\n' 'INPUT(-lc)' > "$PACKAGE_INSTALLING_TOP_DIR/lib/libdl.a"

            LDFLAGS="$LDFLAGS -pthread"
            ;;
        openbsd)
            # https://github.com/mesonbuild/meson/issues/5390
            printf '%s\n' 'INPUT(-lc)' > "$PACKAGE_INSTALLING_TOP_DIR/lib/libdl.a"
            printf '%s\n' 'INPUT(-lc)' > "$PACKAGE_INSTALLING_TOP_DIR/lib/librt.a"
            printf '%s\n' 'INPUT(-lc)' > "$PACKAGE_INSTALLING_TOP_DIR/lib/libcrypt.a"

            LDFLAGS="$LDFLAGS -pthread"
            ;;
    esac

    export   CFLAGS="$CCFLAGS"
    export CXXFLAGS="$XXFLAGS"
    export CPPFLAGS="$CPPFLAGS"
    export  LDFLAGS="$LDFLAGS"

    export       CC_FOR_BUILD="$CC"
    export      CXX_FOR_BUILD="$CXX"
    export      CPP_FOR_BUILD="$CPP"
    export   CFLAGS_FOR_BUILD="$CFLAGS"
    export CXXFLAGS_FOR_BUILD="$CXXFLAGS"
    export CPPFLAGS_FOR_BUILD="$CPPFLAGS"
    export  LDFLAGS_FOR_BUILD="$LDFLAGS"

    unset PKG_CONFIG

    PKG_CONFIG=$(command -v pkg-config || command -v pkgconf || true)

    export PKG_CONFIG

    unset M4

    M4=$(command -v m4 || true)

    export M4

    # https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)
    if [ "$PACKAGE_BUILD_SYSTEM_CMAKE" = yes ] ; then
        unset CMAKE_PREFIX_PATH
        unset CMAKE_APPLE_SILICON_PROCESSOR
        unset CMAKE_BUILD_PARALLEL_LEVEL
        unset CMAKE_BUILD_TYPE
        unset CMAKE_CONFIGURATION_TYPES
        unset CMAKE_CONFIG_TYPE
        unset CMAKE_EXPORT_COMPILE_COMMANDS
        unset CMAKE_GENERATOR
        unset CMAKE_GENERATOR_INSTANCE
        unset CMAKE_GENERATOR_PLATFORM
        unset CMAKE_GENERATOR_TOOLSET
        unset CMAKE_INSTALL_MODE
        unset CMAKE_C_COMPILER_LAUNCHER
        unset CMAKE_C_LINKER_LAUNCHER
        unset CMAKE_CXX_COMPILER_LAUNCHER
        unset CMAKE_CXX_LINKER_LAUNCHER
        unset CMAKE_MSVCIDE_RUN_PATH
        unset CMAKE_NO_VERBOSE
        unset CMAKE_OSX_ARCHITECTURES
        unset CMAKE_TOOLCHAIN_FILE
        unset DESTDIR
        unset CTEST_INTERACTIVE_DEBUG_MODE
        unset CTEST_OUTPUT_ON_FAILURE
        unset CTEST_PARALLEL_LEVEL
        unset CTEST_PROGRESS_OUTPUT
        unset CTEST_USE_LAUNCHERS_DEFAULT
        unset DASHBOARD_TEST_FROM_CTEST

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_BUILD_PARALLEL_LEVEL.html
        export CMAKE_BUILD_PARALLEL_LEVEL="$BUILD_NJOBS"

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_GENERATOR.html
        if [ "$PACKAGE_BUILD_SYSTEM_NINJA" = yes ] ; then
            export CMAKE_GENERATOR='Ninja'
        else
            export CMAKE_GENERATOR='Unix Makefiles'
        fi

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_EXPORT_COMPILE_COMMANDS.html
        if [ "$EXPORT_COMPILE_COMMANDS_JSON" = yes ] ; then
            export CMAKE_EXPORT_COMPILE_COMMANDS=ON
        else
            export CMAKE_EXPORT_COMPILE_COMMANDS=OFF
        fi

        case $BUILD_TYPE in
            debug)   CMAKE_BUILD_TYPE=Debug   ;;
            release) CMAKE_BUILD_TYPE=Release ;;
        esac

        case $INSTALL_LIB in
            static)  BUILD_SHARED_LIBS=OFF ;;
            *)       BUILD_SHARED_LIBS=ON
        esac

        if [ "$VERBOSE_LEVEL" -eq 0 ] ; then
            CMAKE_VERBOSE_MAKEFILE=OFF
            CMAKE_COLOR_MAKEFILE=OFF
        else
            CMAKE_VERBOSE_MAKEFILE=ON
            CMAKE_COLOR_MAKEFILE=ON
        fi

        # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_DEBUG_MODE.html
        if [ "$VERBOSE_LEVEL" -ge 3 ] ; then
            CMAKE_FIND_DEBUG_MODE=ON
        else
            CMAKE_FIND_DEBUG_MODE=OFF
        fi

        CMAKE_TOOLCHAIN_FILE="$PACKAGE_INSTALLING_TOP_DIR/toolchain.cmake"
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        # https://docs.rs/backtrace/latest/backtrace/
        export RUST_BACKTRACE=1

        unset RUST_TARGET

        case $NATIVE_OS_KIND-$NATIVE_OS_ARCH in
            linux-x86_64)
                case $NATIVE_OS_LIBC in
                    glibc) RUST_TARGET=x86_64-unknown-linux-gnu  ;;
                    musl)  RUST_TARGET=x86_64-unknown-linux-musl ;;
                    *)     die "unrecognized libc."
                esac
                ;;
            linux-aarch64)
                case $NATIVE_OS_LIBC in
                    glibc) RUST_TARGET=aarch64-unknown-linux-gnu  ;;
                    musl)  RUST_TARGET=aarch64-unknown-linux-musl ;;
                    *)     die "unrecognized libc."
                esac
                ;;
            darwin-x86_64)  RUST_TARGET=x86_64-apple-darwin  ;;
            darwin-aarch64) RUST_TARGET=aarch64-apple-darwin ;;

            freebsd-amd64)  RUST_TARGET=x86_64-unknown-freebsd ;;

            netbsd-amd64)   RUST_TARGET=x86_64-unknown-netbsd  ;;
        esac

        
        RUST_TARGET_UPPERCASE_UNDERSCORE=$(printf '%s\n' "$RUST_TARGET" | tr a-z A-Z | tr - _)

        # https://doc.rust-lang.org/cargo/reference/config.html#environment-variables
        # https://doc.rust-lang.org/cargo/reference/environment-variables.html
        export "CARGO_TARGET_${RUST_TARGET_UPPERCASE_UNDERSCORE}_AR"="$AR"
        export "CARGO_TARGET_${RUST_TARGET_UPPERCASE_UNDERSCORE}_LINKER"="$CC"

        # this environment variable is not defined by Rust, but it is widely used by third-party project.
        export RUST_TARGET

        export CARGO_BUILD_JOBS="$BUILD_NJOBS"

        if [ "$LINK_TYPE" = 'static-only' ] ; then
            if [ "$NATIVE_OS_KIND" != darwin ] ; then
                if [ "$NATIVE_OS_LIBC" != 'glibc' ] ; then
                    echo 'INPUT(-l:libgcc_eh.a)' > $PACKAGE_INSTALLING_TOP_DIR/lib/libgcc_s.a
                    export RUSTFLAGS="$RUSTFLAGS -Clink-arg=-static -Clink-arg=-ffunction-sections -Clink-arg=-fdata-sections -Clink-arg=-Wl,--gc-sections -Clink-arg=-Wl,--no-dynamic-linker"
                fi
            fi
        fi

        # https://libraries.io/cargo/cc
        # https://crates.io/crates/cc
        # https://docs.rs/cc/latest/cc/
        # https://github.com/alexcrichton/cc-rs
        export HOST_CC="$CC"
        export HOST_CFLAGS="$CFLAGS $CPPFLAGS"

        export HOST_CXX="$CXX"
        export HOST_CXXFLAGS="$CXXFLAGS $CPPFLAGS"

        export HOST_AR="$AR"

        export TARGET_CC="$CC"
        export TARGET_CFLAGS="$CFLAGS $CPPFLAGS"

        export TARGET_CXX="$CXX"
        export TARGET_CXXFLAGS="$CXXFLAGS $CPPFLAGS"

        export TARGET_AR="$AR"


        # https://libraries.io/cargo/pkg-config
        # https://crates.io/crates/pkg-config
        # https://docs.rs/pkg-config/latest/pkg_config/
        # https://github.com/rust-lang/pkg-config-rs
        # export TARGET_PKG_CONFIG_ALLOW_CROSS=1


        # https://libraries.io/cargo/cmake
        # https://crates.io/crates/cmake
        # https://docs.rs/cmake/latest/cmake/
        # https://github.com/alexcrichton/cmake-rs
        # this variable is not motioned in their document. you must read the source code of cmake-rs crate.
        # export TARGET_CMAKE_TOOLCHAIN_FILE="$TARGET_WORKING_DIR/toolchain.cmake"


        for item in $RECURSIVE_DEPENDENT_PACKAGES
        do
            case $item in
                openssl)
                    unset OPENSSL_DIR
                    # https://docs.rs/openssl/0.10.35/openssl/
                    export OPENSSL_DIR="$openssl_INSTALL_DIR"
                    ;;
            esac
        done

        env | grep CARGO_
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_GO" = yes ] ; then
        # https://golang.org/doc/install/source#environment
        export CGO_ENABLED=0
        export CGO_CFLAGS="$CFLAGS"
        export CGO_CXXFLAGS="$CXXFLAGS"
        export CGO_CPPFLAGS="$CPPFLAGS"
        export CGO_LDFLAGS="$LDFLAGS"

        export GO111MODULE='auto'

        if [ "$COUNTRY" = china ] ; then
            export GOPROXY='https://goproxy.cn'
        fi

        unset GOOS
        unset GOARCH

        # export GOOS="$TARGET_OS_TYPE"

        # case $TARGET_OS_ARCH in
        #     armv7*)  export GOARCH=arm   ;;
        #     arm64*)  export GOARCH=arm64 ;;
        #     aarch64) export GOARCH=arm64 ;;
        #     i386)    export GOARCH=386   ;;
        #     i686)    export GOARCH=386   ;;
        #     x86_64)  export GOARCH=amd64 ;;
        # esac
    fi

    if [ "$VERBOSE_LEVEL" -ge 3 ] ; then
        export PKG_CONFIG_DEBUG_SPEW=set
    fi
}

__printf_relevant_environment_variables() {
    step "printf relevant environment variables"

    printf '%s\n' "
PPKG_VERSION      = $PPKG_VERSION
PPKG_HOME         = $PPKG_HOME
PPKG_COMMAND_PATH = $PPKG_COMMAND_PATH
PPKG_INSTALL_ROOT = $PPKG_INSTALL_ROOT
PPKG_SYMLINK_ROOT = $PPKG_SYMLINK_ROOT

PACKAGE_INSTALLING_TOP_DIR = $PACKAGE_INSTALLING_TOP_DIR
PACKAGE_INSTALLING_SRC_DIR = $PACKAGE_INSTALLING_SRC_DIR
PACKAGE_INSTALLING_BST_DIR = $PACKAGE_INSTALLING_BST_DIR
PACKAGE_INSTALLING_TMP_DIR = $PACKAGE_INSTALLING_TMP_DIR

PACKAGE_INSTALL_DIR        = $PACKAGE_INSTALL_DIR

STATIC_LIBRARY_SUFFIX  = $STATIC_LIBRARY_SUFFIX
SHARED_LIBRARY_SUFFIX  = $SHARED_LIBRARY_SUFFIX

        BUILD_NJOBS = $BUILD_NJOBS
        BUILD_TYPE  = $BUILD_TYPE

     TIMESTAMP_UNIX = $TIMESTAMP_UNIX

     NATIVE_OS_KIND = $NATIVE_OS_KIND
     NATIVE_OS_TYPE = $NATIVE_OS_TYPE
     NATIVE_OS_NAME = $NATIVE_OS_NAME
     NATIVE_OS_VERS = $NATIVE_OS_VERS
     NATIVE_OS_ARCH = $NATIVE_OS_ARCH
     NATIVE_OS_NCPU = $NATIVE_OS_NCPU
     NATIVE_OS_LIBC = $NATIVE_OS_LIBC

        PROXIED_CC  = $PROXIED_CC
        PROXIED_CXX = $PROXIED_CXX
    "

    for TOOL in $(list_tools_in_the_toolchain | tr a-z A-Z)
    do
        eval export "$TOOL=\"\$$TOOL\""
        printf "%19s = %s\n" "$TOOL" "$(eval echo \$$TOOL)"
    done

    echo

    for FLAG in CFLAGS CXXFLAGS CPPFLAGS LDFLAGS
    do
        eval export "$FLAG=\"\$$FLAG\""
        printf "\n%19s = " "$FLAG"
        FIRST=yes
        for item in $(eval echo \$$FLAG | tr ':' ' ')
        do
            if [ "$FIRST" = yes ] ; then
                FIRST=no
                printf '%s\n' "$item"
            else
                printf '%s\n' "                      $item"
            fi
        done
    done

    printf '%s\n'

    printf 'PKG_CONFIG          = %s\n' "$PKG_CONFIG"

    printf 'PKG_CONFIG_PATH     = '
    __printf_colon_separated_list "$PKG_CONFIG_PATH"

    printf '%s\n'

    printf 'PKG_CONFIG_LIBDIR   = '
    __printf_colon_separated_list "$PKG_CONFIG_LIBDIR"

    printf '%s\n'

    printf 'PKG_CONFIG_DEBUG_SPEW= %s\n\n' "$PKG_CONFIG_DEBUG_SPEW"

    printf '    LD_LIBRARY_PATH = '
    __printf_colon_separated_list "$LD_LIBRARY_PATH"

    printf "\n%19s = " PATH
    __printf_colon_separated_list "$PATH"

    if [ "$PACKAGE_BUILD_SYSTEM_CMAKE" = yes ] ; then
        printf '%s\n'
        env | sed -n '/^CMAKE_/p'
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        printf "\n%19s = " RUSTFLAGS
        FIRST=yes
        for item in $RUSTFLAGS
        do
            if [ "$FIRST" = yes ] ; then
                FIRST=no
                printf '%s\n' "$item"
            else
                printf '%s\n' "                      $item"
            fi
        done
    fi

    if [ "$VERBOSE_LEVEL" -ge 3 ] ; then
        step "show export variables"
        run export -p
        echo
    fi
}

__printf_colon_separated_list() {
    FIRST=yes

    for item in $(printf '%s\n' "$@" | tr ' ' '|' | tr ':' ' ')
    do
        if [ "$FIRST" = yes ] ; then
            FIRST=no
            printf '%s\n' "$item" | tr '|' ' '
        else
            printf '%s\n' "                      $item" | tr '|' ' '
        fi
    done
}

__adjust_la_files_for_the_given_target() {
    [ -d "$PACKAGE_INSTALL_DIR/lib" ] || {
        note "no .la files installed, skipped"
        return 0
    }

    LA_FILES="$(find "$PACKAGE_INSTALL_DIR/lib" -name "*.la")"

    [ -z "$LA_FILES" ] && {
        note "no .la files installed, skipped"
        return 0
    }

    for lafile in $LA_FILES
    do
        sed_in_place 's|-Wl,--strip-debug||g'      "$lafile"
        sed_in_place "s|-L$MY_HOME_DIR[^' ]*||g"   "$lafile"
        sed_in_place "s|-R[^' ]*||g"               "$lafile"
        #sed_in_place "s|-L$SYSTEM_LIBRARY_DIR||g"  "$lafile"
        #sed_in_place "s|--sysroot $SYSROOT||g"     "$lafile"
    done
}

__adjust_pc_files_for_the_given_target() {
    [ -d "$PACKAGE_INSTALL_DIR/lib/pkgconfig" ] || {
        note "no .pc files installed, skipped"
        return 0
    }

    PC_FILES="$(find "$PACKAGE_INSTALL_DIR/lib/pkgconfig" -name "*.pc")"

    [ -z "$PC_FILES" ] && {
        note "no .pc files installed, skipped"
        return 0
    }

    # cc: error: unrecognized command line option â€˜-Râ€™
    for pcfile in $PC_FILES
    do
        sed_in_place "s|$PACKAGE_INSTALL_DIR|\${pcfiledir}/../..|g" "$pcfile"
        sed_in_place 's|-Wl,--strip-debug||g'      "$pcfile"
        sed_in_place "s|-L$MY_HOME_DIR[^' ]*||g"   "$pcfile"
        sed_in_place "s|-R[^' ]*||g"               "$pcfile"
        sed_in_place "s|-pthread|-lpthread|g"      "$pcfile"
        #sed_in_place "s|-L$SYSTEM_LIBRARY_DIR||g"  "$pcfile"
        #sed_in_place "s|--sysroot $SYSROOT||"      "$pcfile"

        if grep 'Libs.private:' "$pcfile" > /dev/null ; then
            if grep 'Libs:' "$pcfile" > /dev/null ; then
                LIBS_PRIVATE_CONTENT=$(sed -n '/Libs.private:/p' "$pcfile" | cut -c14-)
                sed_in_place "/Libs:/s|\$|$LIBS_PRIVATE_CONTENT|" "$pcfile"
                sed_in_place '/Libs.private:/d' "$pcfile"
            else
                sed_in_place 's|Libs.private:|Libs:|' "$pcfile"
            fi
        fi

        if grep 'Requires.private:' "$pcfile" > /dev/null ; then
            if grep 'Requires:' "$pcfile" > /dev/null ; then
                REQUIRES_PRIVATE_CONTENT=$(sed -n '/Requires.private:/p' "$pcfile" | cut -c18-)
                sed_in_place "/Requires:/s|\$|$REQUIRES_PRIVATE_CONTENT|" "$pcfile"
                sed_in_place '/Requires.private:/d' "$pcfile"
            else
                sed_in_place 's|Requires.private:|Requires:|' "$pcfile"
            fi
        fi

        # https://github.com/mesonbuild/meson/issues/5390
        if [ "$NATIVE_OS_KIND" = openbsd ] ; then
            sed_in_place '/Libs:/s|-ldl||g'    "$pcfile"
            sed_in_place '/Libs:/s|-lrt||g'    "$pcfile"
            sed_in_place '/Libs:/s|-lcrypt||g' "$pcfile"
        fi
    done
}

install_incs() {
    while [ -n "$1" ]
    do
        unset X1
        unset X2
        X1=$(printf '%s\n' "$1" | cut -d: -f1)
        X2=$(printf '%s\n' "$1" | cut -d: -f2)

        if [ "$X1" = "$X2" ] ; then
            unset X2
        fi

        install -v -d         "$PACKAGE_INSTALL_DIR/include/$X2"
        install -v -m 644 $X1 "$PACKAGE_INSTALL_DIR/include/$X2"

        shift
    done
}

install_libs() {
    install -v -d "$PACKAGE_INSTALL_DIR/lib"
    for item in $@
    do
        case $item in
            *.a) install -v -m 644 $item "$PACKAGE_INSTALL_DIR/lib" ;;
            *)   install -v -m 755 $item "$PACKAGE_INSTALL_DIR/lib" ;;
        esac
    done
}

install_pcfs() {
    install -v -d        "$PACKAGE_INSTALL_DIR/lib/pkgconfig" &&
    install -v -m 644 $@ "$PACKAGE_INSTALL_DIR/lib/pkgconfig"
}

install_bins() {
    install -v -d        "$PACKAGE_INSTALL_DIR/bin" &&
    install -v -m 755 $@ "$PACKAGE_INSTALL_DIR/bin"
}

install_etcs() {
    install -v -d        "$PACKAGE_INSTALL_DIR/etc" &&
    install -v -m 644 $@ "$PACKAGE_INSTALL_DIR/etc"
}

install_mans() {
    for item in $@
    do
        unset NUMBER
        NUMBER=$(echo "$item" | cut -c ${#item}-${#item})
        case $NUMBER in
            [1-8]);;
            *)    die "$item: not a manpage."
        esac
        install -v -d           "$PACKAGE_INSTALL_DIR/share/man/man$NUMBER" &&
        install -v -m 644 $item "$PACKAGE_INSTALL_DIR/share/man/man$NUMBER"
    done
}

# install_completion <fish|bash|zsh> <COMMAND> <FILE-PATH>
  install_completion() {
    case $1 in
        bash)
            install -v -d          "$PACKAGE_INSTALL_DIR/share/bash/completions" &&
            install -v -m 644 "$3" "$PACKAGE_INSTALL_DIR/share/bash/completions/$2"
            ;;
        fish)
            install -v -d          "$PACKAGE_INSTALL_DIR/share/fish/vendor_completions.d" &&
            install -v -m 644 "$3" "$PACKAGE_INSTALL_DIR/share/fish/vendor_completions.d/$2.fish"
            ;;
        zsh)
            install -v -d          "$PACKAGE_INSTALL_DIR/share/zsh/site-functions" &&
            install -v -m 644 "$3" "$PACKAGE_INSTALL_DIR/share/zsh/site-functions/_$2"
            ;;
        *)  die "install_completion unsupported shell: $1"
    esac
}

install_pc_file() {
    install -v -d "$PACKAGE_INSTALL_DIR/lib/pkgconfig" &&
    cat >         "$PACKAGE_INSTALL_DIR/lib/pkgconfig/$1.pc"
}

# __symlink_installed_files_of_the_given_package <PACKAGE-NAME>
  __symlink_installed_files_of_the_given_package() {
    # while read -r item
    # do
    #     X=$(printf '%s\n' "$item" | cut -d '|' -f1)
    #     Y=$(printf '%s\n' "$item" | cut -d '|' -f3)

    #     case $X in
    #         d)  ;;
    #         D)  ;;
    #         *)  case $Y in
    #                 share/info/dir) ;;
    #                 *)  if [ -L "$MY_SYMLINKED_DIR/$Y" ] || [ -e "$MY_SYMLINKED_DIR/$Y" ] ; then
    #                         die "$MY_SYMLINKED_DIR/$Y already exists."
    #                     # else
    #                     #     echo "$MY_SYMLINKED_DIR/$Y"
    #                     fi
    #             esac
    #     esac
    # done < "$PACKAGE_MANIFEST_FILEPATH"

    # ############################################################################

    if [ !      -d "$MY_SYMLINKED_DIR/.registry" ] ; then
        install -d "$MY_SYMLINKED_DIR/.registry"
    fi

    exec 7> "$MY_SYMLINKED_DIR/.registry/$1"

    while read -r item
    do
        X=$(printf '%s\n' "$item" | cut -d '|' -f1)
        Y=$(printf '%s\n' "$item" | cut -d '|' -f3)

        case $X in
            d|D)
                if [ !      -d "$MY_SYMLINKED_DIR/$Y" ] ; then
                    install -d "$MY_SYMLINKED_DIR/$Y"
                fi
                ;;
            *)  case $Y in
                    share/info/dir) ;;
                    *)  run ln -sfr "\"$MY_INSTALLED_DIR/$1/$Y\"" "\"$MY_SYMLINKED_DIR/$Y\""
                        printf '%s\n' "$Y" >&7
                esac
        esac
    done < "$PACKAGE_MANIFEST_FILEPATH"

    exec 7>&-
}

# __generate_installed_manifest_of_the_given_package <PACKAGE-NAME>
  __generate_installed_manifest_of_the_given_package() {
    # fuck, some package's filename has space
    IFS_SAVED="$IFS"
    IFS='
'

    exec 7> "$PACKAGE_MANIFEST_FILEPATH"

    for dirname in $(find -mindepth 1 -maxdepth 1 -type d -not -name .ppkg -printf '%P\n')
    do
        for item in $(find "$dirname" -printf '%y:%p\n')
        do
            X=$(printf '%s\n' "$item" | cut -c1)
            Y=${item#$X:}

            case $X in
                l)  if [ -d "$Y" ] ; then
                        printf 'D|0000000000000000000000000000000000000000000000000000000000000000|%s/\n' "$Y" >&7
                    else
                        printf 'l|%s|%s\n' "$(sha256sum "$Y" | cut -d ' ' -f1)"                           "$Y" >&7
                    fi
                    ;;
                d)  printf 'd|0000000000000000000000000000000000000000000000000000000000000000|%s/\n' "$Y" >&7 ;;
                *)  printf '%s|%s|%s\n' "$X" "$(sha256sum "$Y" | cut -d ' ' -f1)"                     "$Y" >&7 ;;
            esac
        done
    done

    exec 7>&-

    IFS="$IFS_SAVED"
}

# __generate_receipt_of_the_given_package <PACKAGE-NAME>
  __generate_receipt_of_the_given_package() {
    [ -z "$1" ] && {
        error "__generate_receipt_of_the_given_package <PACKAGE-NAME>, <PACKAGE-NAME> is not given."
        return 1
    }

    run cp "$PACKAGE_FORMULA_FILEPATH" "$PACKAGE_RECEIPT_FILEPATH"

    sed_in_place "1i pkgname: $PACKAGE_NAME" "$PACKAGE_RECEIPT_FILEPATH"

    if ! grep -q '^version: ' "$PACKAGE_RECEIPT_FILEPATH" ; then
        sed_in_place "2i version: $PACKAGE_VERSION" "$PACKAGE_RECEIPT_FILEPATH"
    fi

    if [ "$PACKAGE_SRC_TYPE" = git ] || [ "$PACKAGE_SRC_TYPE" = dir ] ; then
        if ! grep -q '^git-sha: ' "$PACKAGE_RECEIPT_FILEPATH" ; then
            if grep -q '^git-url: ' "$PACKAGE_RECEIPT_FILEPATH" ; then
                sed_in_place "/^git-url:/a git-sha: $PACKAGE_GIT_SHA" "$PACKAGE_RECEIPT_FILEPATH"
            else
                sed_in_place "\$a git-sha: $PACKAGE_GIT_SHA" "$PACKAGE_RECEIPT_FILEPATH"
            fi
        fi
    fi

    if ! grep -q '^bsystem: ' "$PACKAGE_RECEIPT_FILEPATH" ; then
        sed_in_place "/^install:/i bsystem: $PACKAGE_BSYSTEM" "$PACKAGE_RECEIPT_FILEPATH"
    fi

    sed_in_place '/^#src-url: dir:/d' "$PACKAGE_RECEIPT_FILEPATH"

    cat >> "$PACKAGE_RECEIPT_FILEPATH" <<EOF

signature: $PPKG_VERSION
timestamp: $TIMESTAMP_UNIX
EOF
}

gow() {
    if command -v bat > /dev/null ; then
        run "go env | bat --language=bash --paging=never --style=plain"
    else
        run "go env"
    fi

    printf '\n'

    # /Users/runner/go/pkg/mod/golang.org/x/sys@v0.0.0-20191028164358-195ce5e7f934/unix/syscall_darwin.1_13.go:25:3: //go:linkname must refer to declared function or variable
    if [ "$NATIVE_OS_KIND" = darwin ] ; then
        GOMOD="$PACKAGE_INSTALLING_BST_DIR/go.mod"

        if [ -f "$GOMOD" ] && go mod graph | grep -q 'golang\.org/x/sys' ; then
            run go get -u golang.org/x/sys

            if [ -d "$PACKAGE_INSTALLING_BST_DIR/vendor" ] ; then
                unset GO_VERSION_MAJOR
                unset GO_VERSION_MINOR

                GO_VERSION_MAJOR=$(go env GOVERSION | cut -c3- | cut -d. -f1)
                GO_VERSION_MINOR=$(go env GOVERSION | cut -c3- | cut -d. -f2)

                sed_in_place "/^go[[:space:]]*[1-9]\.[0-9][0-9]/c go $GO_VERSION_MAJOR.$GO_VERSION_MINOR" "$GOMOD"

                run go mod tidy
                run go mod vendor
            fi
        fi
    fi

    # https://pkg.go.dev/cmd/go
    # https://pkg.go.dev/cmd/link

    unset GO_BUILD_ARGS
    unset GO_BUILD_ARGV_V
    unset GO_BUILD_ARGV_X
    unset GO_BUILD_ARGV_O
    unset GO_BUILD_ARGV_MOD
    unset GO_BUILD_ARGV_TAGS
    unset GO_BUILD_ARGV_LDFLAGS

    unset GO_BUILD_ARGS_EXTRA

    while [ -n "$1" ]
    do
        case $1 in
            -v) shift ; GO_BUILD_ARGV_V='-v' ;;
            -x) shift ; GO_BUILD_ARGV_X='-x' ;;
            -o) shift ; GO_BUILD_ARGV_O="$1" ; shift ;;
            -X) shift
                if [ -z "$GO_BUILD_ARGV_LDFLAGS" ] ; then
                    GO_BUILD_ARGV_LDFLAGS="-X $1"
                else
                    GO_BUILD_ARGV_LDFLAGS="$GO_BUILD_ARGV_LDFLAGS -X $1"
                fi
                shift
                ;;
            -ldflags)
                shift
                if [ -z "$GO_BUILD_ARGV_LDFLAGS" ] ; then
                    GO_BUILD_ARGV_LDFLAGS="$1"
                else
                    GO_BUILD_ARGV_LDFLAGS="$1 $GO_BUILD_ARGV_LDFLAGS"
                fi
                shift
                ;;
            *)  GO_BUILD_ARGS_EXTRA="$GO_BUILD_ARGS_EXTRA $1" ; shift
        esac
    done

    GO_BUILD_ARGS='-trimpath'

    if [ -z "$GO_BUILD_ARGV_V" ] ; then
        if [ "$VERBOSE_LEVEL" -gt 0 ] ; then
            GO_BUILD_ARGS="$GO_BUILD_ARGS -v"
        fi
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -v"
    fi

    if [ -z "$GO_BUILD_ARGV_X" ] ; then
        if [ "$VERBOSE_LEVEL" -ge 2 ] ; then
            GO_BUILD_ARGS="$GO_BUILD_ARGS -x"
        fi
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -x"
    fi

    if [ "$BUILD_TYPE" = release ] ; then
        GO_BUILD_ARGV_LDFLAGS="$GO_BUILD_ARGV_LDFLAGS -s -w"
    fi

    if [ "$NATIVE_OS_KIND" != darwin ] ; then
        if [ "$LINK_TYPE" = static-only ] && [ "$CGO_ENABLED" -eq 1 ] ; then
            GO_BUILD_ARGV_LDFLAGS="$GO_BUILD_ARGV_LDFLAGS -linkmode external \"-extldflags=-static\""
        fi
    fi

    GO_BUILD_ARGS="$GO_BUILD_ARGS -ldflags '$GO_BUILD_ARGV_LDFLAGS'"

    if [ -z "$GO_BUILD_ARGV_O" ] ; then
        GO_BUILD_ARGS="$GO_BUILD_ARGS -o $PACKAGE_INSTALLING_TMP_DIR/"
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -o $PACKAGE_INSTALLING_TMP_DIR/$GO_BUILD_ARGV_O"
    fi

    GO_BUILD_ARGS="$GO_BUILD_ARGS $GO_BUILD_ARGS_EXTRA"

    run go build $GO_BUILD_ARGS

    for item in $(ls "$PACKAGE_INSTALLING_TMP_DIR")
    do
        case $item in
            *.a)  run install_libs "$PACKAGE_INSTALLING_TMP_DIR/$item" ;;
            *.so) run install_libs "$PACKAGE_INSTALLING_TMP_DIR/$item" ;;
            *)    run install_bins "$PACKAGE_INSTALLING_TMP_DIR/$item" ;;
        esac
    done
}

cargow() {
    run rustup target add "$RUST_TARGET"

    case $1 in
        build)
            # https://doc.rust-lang.org/cargo/commands/cargo-clean.html
            # https://doc.rust-lang.org/cargo/commands/cargo-build.html

            unset CARGO_BUILD_ARGS
            unset CARGO_BUILD_ARG_VV
            unset CARGO_BUILD_ARG_TARGET
            unset CARGO_BUILD_ARG_RELEASE

            for arg in $@
            do
                case $arg in
                    --vv)      CARGO_BUILD_ARG_VV=set      ;;
                    --target)  CARGO_BUILD_ARG_TARGET=set  ;;
                    --release) CARGO_BUILD_ARG_RELEASE=set ;;
                esac
            done

            CARGO_BUILD_ARGS="$@"

            if [ -z "$CARGO_BUILD_ARG_VV" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS -vv"
            fi

            if [ -z "$CARGO_BUILD_ARG_RELEASE" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS --release"
            fi

            if [ -z "$CARGO_BUILD_ARG_TARGET" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS --target $RUST_TARGET"
            fi

            run cargo clean && run cargo $CARGO_BUILD_ARGS
            ;;
        install)
            # https://doc.rust-lang.org/cargo/commands/cargo-clean.html
            # https://doc.rust-lang.org/cargo/commands/cargo-install.html

            unset CARGO_INSTALL_ARGS
            unset CARGO_INSTALL_ARG_TARGET
            unset CARGO_INSTALL_ARG_PATH
            unset CARGO_INSTALL_ARG_ROOT
            unset CARGO_INSTALL_ARG_VV

            for arg in $@
            do
                case $arg in
                    --target) CARGO_INSTALL_ARG_TARGET=set ;;
                    --path)   CARGO_INSTALL_ARG_PATH=set   ;;
                    --root)   CARGO_INSTALL_ARG_ROOT=set   ;;
                    --vv)     CARGO_INSTALL_ARG_VV=set     ;;
                esac
            done

            CARGO_INSTALL_ARGS="$@"

            if [ -z "$CARGO_INSTALL_ARG_VV" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS -vv"
            fi

            if [ -z "$CARGO_INSTALL_ARG_TARGET" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --target $RUST_TARGET"
            fi

            if [ -z "$CARGO_INSTALL_ARG_PATH" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --path $PACKAGE_INSTALLING_BST_DIR"
            fi

            if [ -z "$CARGO_INSTALL_ARG_ROOT" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --root=$PACKAGE_INSTALL_DIR"
            fi

            run cargo clean && run cargo $CARGO_INSTALL_ARGS
            ;;
        cbuild|cinstall)
            unset CARGO_CINSTALL_ARGS
            unset CARGO_CINSTALL_ARG_Q
            unset CARGO_CINSTALL_ARG_V
            unset CARGO_CINSTALL_ARG_VV
            unset CARGO_CINSTALL_ARG_DEBUG
            unset CARGO_CINSTALL_ARG_RELEASE
            unset CARGO_CINSTALL_ARG_TARGET
            unset CARGO_CINSTALL_ARG_PREFIX

            for arg in $@
            do
                case $arg in
                    -q|--quiet)   CARGO_CINSTALL_ARG_Q=set       ;;
                    -v|--verbose) CARGO_CINSTALL_ARG_V=set       ;;
                    -vv)          CARGO_CINSTALL_ARG_VV=set      ;;
                    --debug)      CARGO_CINSTALL_ARG_DEBUG=set   ;;
                    --release)    CARGO_CINSTALL_ARG_RELEASE=set ;;
                    --target)     CARGO_CINSTALL_ARG_TARGET=set  ;;
                    --prefix)     CARGO_CINSTALL_ARG_PREFIX=set  ;;
                esac
            done

            CARGO_CINSTALL_ARGS="$@"

            if [ -z "$CARGO_CINSTALL_ARG_Q" ] && [ -z "$CARGO_CINSTALL_ARG_V" ] && [ -z "$CARGO_CINSTALL_ARG_VV" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS -vv"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_DEBUG" ] && [ -z "$CARGO_CINSTALL_ARG_RELEASE" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --release"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_TARGET" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --target $RUST_TARGET"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_PREFIX" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --prefix $PACKAGE_INSTALL_DIR"
            fi

            run cargo $CARGO_CINSTALL_ARGS
            ;;
        *) cargo $@
    esac
}

# run in a subshell
configure_only() {
    export FORCE_UNSAFE_CONFIGURE=1

    export ac_cv_func_malloc_0_nonnull=yes
    export ac_cv_func_calloc_0_nonnull=yes
    export ac_cv_func_realloc_0_nonnull=yes

    CONFIGURE_ARGS="
        --prefix='$PACKAGE_INSTALL_DIR'
        --disable-option-checking
        --enable-rpath
        --disable-nls
        --enable-largefile
        CC='$CC'
        CFLAGS='$CFLAGS'
        CXX='$CXX'
        CXXFLAGS='$CXXFLAGS'
        CPP='$CPP'
        CPPFLAGS='$CPPFLAGS'
        LDFLAGS='$LDFLAGS'
        AR='$AR'
        RANLIB='$RANLIB'
        PKG_CONFIG='$PKG_CONFIG'
        PKG_CONFIG_PATH='$PKG_CONFIG_PATH'
        PKG_CONFIG_LIBDIR='$PKG_CONFIG_LIBDIR'"

    if [ "$BUILD_TYPE" = release ] ; then
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-debug"
    else
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-debug"
    fi

    case $INSTALL_LIB in
        static) CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-static --disable-shared" ;;
        shared) CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-shared --disable-static" ;;
        both)   CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-static --enable-shared"  ;;
        no)     CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-static --disable-shared";;
    esac

    if [ "$VERBOSE_LEVEL" -eq 4 ] ; then
        sed_in_place '1a set -x' "$PACKAGE_INSTALLING_BST_DIR/configure"
    fi

    if run $PACKAGE_INSTALLING_BST_DIR/configure $CONFIGURE_ARGS $@ ; then
        echo
    else
        if [ -f "$PACKAGE_INSTALLING_TMP_DIR/config.log" ] ; then
            run cat "$PACKAGE_INSTALLING_TMP_DIR/config.log"
        elif [ -f "$PACKAGE_INSTALLING_BST_DIR/config.log" ] ; then
            run cat "$PACKAGE_INSTALLING_BST_DIR/config.log"
        fi
        return 1
    fi

    if [ "$VERBOSE_LEVEL" -ge 2 ] ; then
        for Makefile in $(find "$PACKAGE_INSTALLING_BST_DIR" -name Makefile)
        do
            sed_in_place 's|\t@|\t|g'     "$Makefile" || return 1
            sed_in_place 's|@echo|echo|g' "$Makefile" || return 1
        done
        unset Makefile
    fi
}

# run in a subshell
configure() {
    configure_only "$@" &&
    gmakew clean &&
    gmakew V=1   &&
    gmakew install
}

# gmake wrapper
gmakew() {
    run gmake --version

    if [ "$VERBOSE_LEVEL" -ge 3 ] ; then
        run gmake "-j$BUILD_NJOBS --debug $*"
    else
        run gmake "-j$BUILD_NJOBS $*"
    fi
}

# https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling
# https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_ROOT_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html
# https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html
# https://cmake.org/cmake/help/latest/command/enable_testing.html?highlight=build_testing
# run in a subshell
cmakew() {
        cat > "$CMAKE_TOOLCHAIN_FILE" <<EOF
message(STATUS "CMake command: \${CMAKE_COMMAND}")
message(STATUS "CMake version: \${CMAKE_VERSION}")

if ("\${BUILD_SHARED_LIBS}" STREQUAL "")
    set(BUILD_SHARED_LIBS $BUILD_SHARED_LIBS)
endif()

set(CMAKE_BUILD_TYPE  $CMAKE_BUILD_TYPE)

set(CMAKE_C_COMPILER "$CC")
set(CMAKE_C_FLAGS "$CPPFLAGS $CFLAGS")

set(CMAKE_CXX_COMPILER "$CXX")
set(CMAKE_CXX_FLAGS "$CPPFLAGS $CXXFLAGS")

set(CMAKE_ASM_COMPILER "$CC")

set(CMAKE_SHARED_LINKER_FLAGS "$(printf '%s\n' "$LDFLAGS" | sed -e 's|--static||g' -e 's|-static||g')")
set(CMAKE_EXE_LINKER_FLAGS    "$LDFLAGS")

set(CMAKE_C_COMPILER_AR     "$AR")
set(CMAKE_C_COMPILER_RANLIB "$RANLIB")

set(CMAKE_CXX_COMPILER_AR     "$AR")
set(CMAKE_CXX_COMPILER_RANLIB "$RANLIB")

set(CMAKE_AR      "$AR")
set(CMAKE_RANLIB  "$RANLIB")

set(CMAKE_LINKER  "$LD")

set(CMAKE_NM      "$NM")
set(CMAKE_READELF "$READELF")

set(CMAKE_OBJCOPY "$OBJCOPY")
set(CMAKE_OBJDUMP "$OBJDUMP")

set(CMAKE_STRIP   "$STRIP")

set(CMAKE_DLLTOOL "$DLLTOOL")

set(CMAKE_ADDR2LINE "$ADDR2LINE")

set(CMAKE_FIND_DEBUG_MODE $CMAKE_FIND_DEBUG_MODE)

set(CMAKE_FIND_ROOT_PATH "$CMAKE_FIND_ROOT_PATH")
EOF

    if [ "$VERBOSE_LEVEL" -gt 0 ] ; then
        run cat "$CMAKE_TOOLCHAIN_FILE"
    fi

    # https://cmake.org/cmake/help/latest/variable/CMAKE_PROJECT_INCLUDE.html

    CMAKE_PROJECT_INCLUDE="$PACKAGE_INSTALLING_TOP_DIR/project-after.cmake"

    # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_LIBRARY_SUFFIXES.html

    if [ "$NATIVE_OS_KIND" = darwin ] ; then
        case $LINK_TYPE in
            static-only)     printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")\n'          > "$CMAKE_PROJECT_INCLUDE" ;;
            static-prefered) printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ".dylib")\n' > "$CMAKE_PROJECT_INCLUDE" ;;
            shared-only)     printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib")\n'      > "$CMAKE_PROJECT_INCLUDE" ;;
            shared-prefered) printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib" ".a")\n' > "$CMAKE_PROJECT_INCLUDE" ;;
        esac
    else
        case $LINK_TYPE in
            static-only)     printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")\n'          > "$CMAKE_PROJECT_INCLUDE" ;;
            static-prefered) printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ".so")\n'    > "$CMAKE_PROJECT_INCLUDE" ;;
            shared-only)     printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".so")\n'         > "$CMAKE_PROJECT_INCLUDE" ;;
            shared-prefered) printf 'set(CMAKE_FIND_LIBRARY_SUFFIXES ".so" ".a")\n'    > "$CMAKE_PROJECT_INCLUDE" ;;
        esac
    fi

    if [ "$VERBOSE_LEVEL" -gt 0 ] ; then
        run cat "$CMAKE_PROJECT_INCLUDE"
    fi

    run cmake \
        -Wno-dev \
        -DCMAKE_INSTALL_LIBDIR=lib \
        -DCMAKE_INSTALL_PREFIX=$PACKAGE_INSTALL_DIR \
        -DCMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE \
        -DCMAKE_PROJECT_INCLUDE=$CMAKE_PROJECT_INCLUDE \
        -DCMAKE_VERBOSE_MAKEFILE=$CMAKE_VERBOSE_MAKEFILE \
        -DCMAKE_COLOR_MAKEFILE=$CMAKE_COLOR_MAKEFILE \
        -S $PACKAGE_INSTALLING_BST_DIR \
        -B $PACKAGE_INSTALLING_TMP_DIR $@ &&
    run cmake --build   "$PACKAGE_INSTALLING_TMP_DIR" -- -j$BUILD_NJOBS &&
    run cmake --install "$PACKAGE_INSTALLING_TMP_DIR"
}

# https://github.com/xmake-io/xmake/issues/2003
# run in a subshell
xmakew() {
    export XMAKE_ROOT=y

    XMAKE=$(command -v xmake)

    [ -z "$XMAKE" ] && die "command not found: xmake"

    run xmake --version

    XMAKE_CONFIG_OPTIONS="$@"

    XMAKE_CONFIG_OPTION_CLEAN=
    XMAKE_CONFIG_OPTION_MODE=
    XMAKE_CONFIG_OPTION_vD=

    for arg in $@
    do
        case $arg in
            -c|--clean)  XMAKE_CONFIG_OPTION_CLEAN=set ;;
            -m|--mode=*) XMAKE_CONFIG_OPTION_MODE=set  ;;
            -vD)         XMAKE_CONFIG_OPTION_vD=set ;;
        esac
    done

    if [ "$VERBOSE_LEVEL" -ge 3 ] && [ -z "$XMAKE_CONFIG_OPTION_vD" ]; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTION_vD -vD"
    fi

    if [ -z "$XMAKE_CONFIG_OPTION_CLEAN" ] ; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --clean"
    fi

    if [ -z "$XMAKE_CONFIG_OPTION_MODE" ] ; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --mode=$BUILD_TYPE"
    fi

    run $XMAKE config $XMAKE_CONFIG_OPTIONS --project=$PACKAGE_INSTALLING_BST_DIR --buildir=$PACKAGE_INSTALLING_TMP_DIR &&
    run $XMAKE --jobs=$BUILD_NJOBS &&
    run $XMAKE install -o "$PACKAGE_INSTALL_DIR"
}

# https://mesonbuild.com/Cross-compilation.html
# run in a subshell
mesonw() {
    unset MESON_BUILD_DEFAULT_LIBRARY

    case $INSTALL_LIB in
        static|shared|both) MESON_BUILD_DEFAULT_LIBRARY="$INSTALL_LIB"
    esac

        MESON_CROSS_FILE="$PACKAGE_INSTALLING_TMP_DIR/cross-file"

    cat > "$MESON_CROSS_FILE" <<EOF
[binaries]
c = '$CC'
cpp = '$CXX'
ar = '$AR'
strip = '$STRIP'

[built-in options]
c_args = $(to_meson_array $CFLAGS $CPPFLAGS)
c_link_args = $(to_meson_array $LDFLAGS)
cpp_args = $(to_meson_array $CXXFLAGS $CPPFLAGS)
cpp_link_args = $(to_meson_array $LDFLAGS)
EOF

    run meson --version
    run ninja --version
    run meson setup \
        --prefix="$PACKAGE_INSTALL_DIR" \
        --buildtype=release \
        --backend=ninja \
        --pkg-config-path="$PKG_CONFIG_PATH" \
        --build.pkg-config-path="$PKG_CONFIG_PATH" \
        -Ddefault_library=$MESON_BUILD_DEFAULT_LIBRARY \
        -Dlibdir=lib \
        $@ "$PACKAGE_INSTALLING_TMP_DIR" "$PACKAGE_INSTALLING_BST_DIR" &&
    {
        if command -v build_configed > /dev/null ; then
            build_configed
        fi
    } &&
    run ninja -C "$PACKAGE_INSTALLING_TMP_DIR" &&
    run ninja -C "$PACKAGE_INSTALLING_TMP_DIR" install
}

to_meson_array() {
    RESULT="[''"
    for item in $@
    do
        RESULT="$RESULT, '$item'"
    done
    RESULT="$RESULT]"
    echo "$RESULT"
}


########################################################################

list_tools_in_the_toolchain() {
    list cc cxx cpp as ar ranlib ld nm strip size strings objdump objcopy readelf dlltool addr2line
}

echo_path_of_tool_in_the_toolchain() {
    case $1 in
        cc)  command -v cc  || command -v gcc || command -v clang   ;;
        cxx) command -v c++ || command -v g++ || command -v clang++ ;;
        *)   command -v "$1"
    esac
}

__is_core_tools_installed() {
    [ -e "$MY_CORE_BIN_DIR/uppm" ] || return 1

    for item in bash coreutils util-linux findutils gawk gsed grep tree curl git zip unzip gtar gzip xz bzip2 lzip patch patchelf pkg-config yq
    do
        "$MY_CORE_BIN_DIR/uppm" is-installed "$item" || return 1
    done

    return 0
}

bppend_to_ACLOCAL_PATH() {
    case ":${ACLOCAL_PATH}:" in
        *:"$1":*) ;;
        *) export ACLOCAL_PATH="$1:$ACLOCAL_PATH" ;;
    esac
}

main() {
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_05_03
    #IFS_DEFAULT=$(printf ' \t\n')
    #IFS=$IFS_DEFAULT

    # MY represents this software's

    MY_HOME_DIR="$HOME/.ppkg"

    MY_CORE_DIR="$MY_HOME_DIR/core"
    MY_CORE_BIN_DIR="$MY_CORE_DIR/bin"

    MY_INSTALLED_DIR="/opt/ppkg/installed"
    MY_SYMLINKED_DIR="/opt/ppkg/symlinked"

    __is_core_tools_installed || {
        return 1
    }

    # https://www.gnu.org/software/automake/manual/html_node/Macro-Search-Path.html
    if [ -z "$ACLOCAL_PATH" ] ; then
        export ACLOCAL_PATH="$MY_CORE_DIR/share/aclocal"
    else
        export ACLOCAL_PATH="$MY_CORE_DIR/share/aclocal:$ACLOCAL_PATH"
    fi

    # https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables
    if [ -d "$HOME/.uppm/installed/git/libexec/git-core" ] ; then
        export GIT_EXEC_PATH="$HOME/.uppm/installed/git/libexec/git-core"
        export GIT_TEMPLATE_DIR="$HOME/.uppm/installed/git/share/git-core/templates"
    fi

    # https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_default_verify_paths.html
    if [ -f "$MY_CORE_DIR/etc/ssl/certs/cacert.pem" ] ; then
        export SSL_CERT_FILE="$MY_CORE_DIR/etc/ssl/certs/cacert.pem"
    fi

    if [ "$(id -u)" -ne 0 ] ; then
        sudo=sudo
    fi

    TIMESTAMP_UNIX="$(date +%s)"

    #######################################################################################

    CURRENT_USER__NAME="$(id -n -u)"
    CURRENT_GROUP_NAME="$(id -n -g)"

    if [ -d "$MY_HOME_DIR" ] ; then
        if [ -r "$MY_HOME_DIR" ] && [ -w "$MY_HOME_DIR" ] && [ -x "$MY_HOME_DIR" ] ; then
            :
        else
            if [ -r /opt ] && [ -w /opt ] && [ -x /opt ] ; then
                     chown -R "$CURRENT_GROUP_NAME:$CURRENT_USER__NAME" "$MY_HOME_DIR"
            else
                sudo chown -R "$CURRENT_GROUP_NAME:$CURRENT_USER__NAME" "$MY_HOME_DIR"
            fi
        fi
    else
        if [ -r /opt ] && [ -w /opt ] && [ -x /opt ] ; then
                 install -g "$CURRENT_GROUP_NAME" -o "$CURRENT_USER__NAME" -d "$MY_HOME_DIR"
        else
            sudo install -g "$CURRENT_GROUP_NAME" -o "$CURRENT_USER__NAME" -d "$MY_HOME_DIR"
        fi
    fi

    #######################################################################################

    # https://stackoverflow.com/questions/18476490/what-is-purpose-of-target-arch-variable-in-makefiles
    unset TARGET_ARCH

    if [ "$INSTALL_LIB" = yes ] ; then
        INSTALL_LIB=both
    fi


    if [ "$VERBOSE_LEVEL" -eq 0 ] ; then
        exec 1>/dev/null
        exec 2>&1
    fi

    if [ "$VERBOSE_LEVEL" -ge 3 ] ; then
        export PKG_CONFIG_DEBUG_SPEW=set
    fi

    printf '%b\n' "${COLOR_PURPLE}=============== Installing ${COLOR_OFF}${COLOR_GREEN}${1}${COLOR_OFF}${COLOR_PURPLE} ===============${COLOR_OFF}"

    PACKAGE_NAME_UPPERCASE_UNDERSCORE=$(printf '%s\n' "$PACKAGE_NAME" | tr a-z A-Z | tr '@+-.' '_')

    PACKAGE_BUILD_SYSTEM=$PACKAGE_BSYSTEM

    PACKAGE_BUILD_IN_PARALLEL="$PACKAGE_PARALLEL"

    PACKAGE_BUILD_IN_BSCRIPT_DIR="$PACKAGE_BINBSTD"

    PACKAGE_VERSION_MAJOR="$(printf '%s\n' "$PACKAGE_VERSION" | cut -d. -f1)"
    PACKAGE_VERSION_MINOR="$(printf '%s\n' "$PACKAGE_VERSION" | cut -d. -f2)"
    PACKAGE_VERSION_PATCH="$(printf '%s\n' "$PACKAGE_VERSION" | cut -d. -f3)"
    PACKAGE_VERSION_TWEAK="$(printf '%s\n' "$PACKAGE_VERSION" | cut -d. -f4)"

    for item in $PACKAGE_BUILD_SYSTEM
    do
        case $item in
            ndk-build)   PACKAGE_BUILD_SYSTEM_NDK_BUILD=yes ;;
            autogen)     PACKAGE_BUILD_SYSTEM_AUTOGENSH=yes ; PACKAGE_BUILD_SYSTEM_GMAKE=yes ;;
            autotools)   PACKAGE_BUILD_SYSTEM_AUTOTOOLS=yes ; PACKAGE_BUILD_SYSTEM_GMAKE=yes ;;
            configure)   PACKAGE_BUILD_SYSTEM_CONFIGURE=yes ; PACKAGE_BUILD_SYSTEM_GMAKE=yes ;;
            cmake-gmake) PACKAGE_BUILD_SYSTEM_CMAKE=yes     ; PACKAGE_BUILD_SYSTEM_GMAKE=yes ;;
            cmake-ninja) PACKAGE_BUILD_SYSTEM_CMAKE=yes     ; PACKAGE_BUILD_SYSTEM_NINJA=yes ;;
            cmake)       PACKAGE_BUILD_SYSTEM_CMAKE=yes     ; PACKAGE_BUILD_SYSTEM_NINJA=yes ;;
            xmake)       PACKAGE_BUILD_SYSTEM_XMAKE=yes     ;;
            meson)       PACKAGE_BUILD_SYSTEM_MESON=yes     ; PACKAGE_BUILD_SYSTEM_NINJA=yes ;;
            ninja)       PACKAGE_BUILD_SYSTEM_NINJA=yes     ;;
            gmake)       PACKAGE_BUILD_SYSTEM_GMAKE=yes     ;;
            rake)        PACKAGE_BUILD_SYSTEM_RAKE=yes      ;;
            cargo)       PACKAGE_BUILD_SYSTEM_CARGO=yes     ;;
            go)          PACKAGE_BUILD_SYSTEM_GO=yes        ;;
        esac
    done

    for item in $PACKAGE_BUILD_SYSTEM
    do
        case $item in
            autogen)     PACKAGE_DEP_PKG="$PACKAGE_DEP_PKG automake" ;;
            autotools)   PACKAGE_DEP_PKG="$PACKAGE_DEP_PKG automake" ;;

            configure)   PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP gmake"  ;;
            cmake-gmake) PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP cmake gmake"  ;;
            cmake-ninja) PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP cmake ninja"  ;;
            cmake)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP cmake ninja"  ;;
            xmake)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP xmake"  ;;
            meson)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP ninja"  ;;
            ninja)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP ninja"  ;;
            gmake)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP gmake"  ;;
            rake)        PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP ruby"   ;;
            #cargo)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP rustup" ;;
            go)          PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP golang" ;;
        esac
    done

    if [ "$PACKAGE_BUILD_SYSTEM_MESON" = yes ] ; then
        PACKAGE_DEP_PYM="$PACKAGE_DEP_PYM meson"
    fi

    if [ -n "$PACKAGE_DEP_PYM" ] ; then
        PACKAGE_DEP_PKG="$PACKAGE_DEP_PKG python3"
    fi

    if [ -n "$PACKAGE_DEP_PLM" ] ; then
        PACKAGE_DEP_PKG="$PACKAGE_DEP_PKG perl"
    fi

    if [ "$PACKAGE_BUILD_IN_PARALLEL" = no ] ; then
        BUILD_NJOBS=1
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_GO" = yes ] ; then
        PACKAGE_BINBSTD=yes
        PACKAGE_BUILD_IN_BSCRIPT_DIR=yes
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        PACKAGE_BINBSTD=yes
        PACKAGE_BUILD_IN_BSCRIPT_DIR=yes
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_XMAKE" = yes ] ; then
        PACKAGE_BINBSTD=yes
        PACKAGE_BUILD_IN_BSCRIPT_DIR=yes
    fi

    #########################################################################################

    if [ "$PACKAGE_BUILD_SYSTEM_GMAKE" = yes ] && [ "$EXPORT_COMPILE_COMMANDS_JSON" = yes ] && [ "$BEAR_ENABLED" = yes ] ; then
        PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP bear"
    fi

    if [ "$CCACHE_ENABLED" = yes ] ; then
        PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP ccache"
    fi

    #########################################################################################

    if [ -n "$PACKAGE_DEP_UPP" ] ; then
        step "install depentent tools via uppm"

        # run uppm env

        UPPM_NEED_UPDATE=yes

        for item in $PACKAGE_DEP_UPP
        do
            if uppm is-installed "$item" ; then
                note "package [$item] already has been installed."
            else
                if [ "$UPPM_NEED_UPDATE" = yes ] ; then
                    UPPM_NEED_UPDATE=no
                    run uppm update
                fi

                run uppm install "$item"
            fi
            # bppend_to_PATH "$("$MY_CORE_BIN_DIR/uppm" info "$item" installed-dir)/bin"
        done
    fi

    #########################################################################################

    step "create relevant directories"

    PACKAGE_INSTALLING_TOP_DIR="$MY_HOME_DIR/installing/$1"
    PACKAGE_INSTALLING_SRC_DIR="$PACKAGE_INSTALLING_TOP_DIR/src"
    PACKAGE_INSTALLING_FIX_DIR="$PACKAGE_INSTALLING_TOP_DIR/fix"
    PACKAGE_INSTALLING_RES_DIR="$PACKAGE_INSTALLING_TOP_DIR/res"
    PACKAGE_INSTALLING_BIN_DIR="$PACKAGE_INSTALLING_TOP_DIR/bin"
    PACKAGE_INSTALLING_INC_DIR="$PACKAGE_INSTALLING_TOP_DIR/inc"
    PACKAGE_INSTALLING_LIB_DIR="$PACKAGE_INSTALLING_TOP_DIR/lib"
    PACKAGE_INSTALLING_TMP_DIR="$PACKAGE_INSTALLING_TOP_DIR/tmp"

    if [ -z "$PACKAGE_BSCRIPT" ] ; then
        PACKAGE_INSTALLING_BST_DIR="$PACKAGE_INSTALLING_SRC_DIR"
    else
        PACKAGE_INSTALLING_BST_DIR="$PACKAGE_INSTALLING_SRC_DIR/$PACKAGE_BSCRIPT"
    fi

    rm -rf     "$PACKAGE_INSTALLING_TOP_DIR"

    install -d "$PACKAGE_INSTALLING_SRC_DIR"
    install -d "$PACKAGE_INSTALLING_FIX_DIR"
    install -d "$PACKAGE_INSTALLING_RES_DIR"
    install -d "$PACKAGE_INSTALLING_BIN_DIR"
    install -d "$PACKAGE_INSTALLING_INC_DIR"
    install -d "$PACKAGE_INSTALLING_LIB_DIR"
    install -d "$PACKAGE_INSTALLING_TMP_DIR"

    #########################################################################################

    PACKAGE_INSTALL_DIR="$MY_INSTALLED_DIR/$1"
    PACKAGE_METAINF_DIR="$PACKAGE_INSTALL_DIR/.ppkg"

    PACKAGE_MANIFEST_FILEPATH="$PACKAGE_METAINF_DIR/manifest.txt"
    PACKAGE_RECEIPT_FILEPATH="$PACKAGE_METAINF_DIR/receipt.yml"

    #########################################################################################

    unset RECURSIVE_DEPENDENT_PACKAGES

    if [ -n "$PACKAGE_DEP_PKG" ] ; then
        step "generating dependency tree of $1"
        RECURSIVE_DEPENDENT_PACKAGES="$(__get_packages_that_are_recursively_depended_by_the_given_packages $PACKAGE_DEP_PKG)"

        PACKAGE_DEPENDENCY_GRAPH_FILEPATH_DOT="$PACKAGE_INSTALLING_TOP_DIR/dependencies.dot"
        PACKAGE_DEPENDENCY_GRAPH_FILEPATH_TXT="$PACKAGE_INSTALLING_TOP_DIR/dependencies.txt"
        PACKAGE_DEPENDENCY_GRAPH_FILEPATH_SVG="$PACKAGE_INSTALLING_TOP_DIR/dependencies.svg"
        PACKAGE_DEPENDENCY_GRAPH_FILEPATH_PNG="$PACKAGE_INSTALLING_TOP_DIR/dependencies.png"

        ppkg depends --type=dot > "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_DOT" || true
        ppkg depends --type=box > "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_TXT" || true
        ppkg depends --type=svg > "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_SVG" || true
        ppkg depends --type=png > "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_PNG" || true

        if [ -f "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_TXT" ] ; then
            cat "$PACKAGE_DEPENDENCY_GRAPH_FILEPATH_TXT"
        fi
    fi

    #########################################################################################

    # pip install --user <PKG>
    bppend_to_PATH "$HOME/.local/bin"

    # cpan install to default local location
    bppend_to_PATH "$HOME/perl5/bin"

    if [ -f "$HOME/.cargo/env" ] ; then
        .   "$HOME/.cargo/env"
    fi

    UPPM_INSTALLED_PACKAGES_DIR="$HOME/.uppm/installed"

    if [ -d "$UPPM_INSTALLED_PACKAGES_DIR" ] ; then
        for item in $(ls "$UPPM_INSTALLED_PACKAGES_DIR")
        do
            if [ -d "$UPPM_INSTALLED_PACKAGES_DIR/$item" ] && [ -f "$UPPM_INSTALLED_PACKAGES_DIR/$item/.uppm/receipt.yml" ] ; then
                if [ -d "$UPPM_INSTALLED_PACKAGES_DIR/$item/bin" ] ; then
                    bppend_to_PATH "$UPPM_INSTALLED_PACKAGES_DIR/$item/bin"
                fi

                if [ -d "$UPPM_INSTALLED_PACKAGES_DIR/$item/share/aclocal" ] ; then
                    bppend_to_ACLOCAL_PATH "$UPPM_INSTALLED_PACKAGES_DIR/$item/share/aclocal"
                fi
            fi
        done
    fi

    bppend_to_PATH "$MY_CORE_BIN_DIR"

    #########################################################################################

    __export_relevant_environment_variables "$1"
    __printf_relevant_environment_variables "$1"

    #########################################################################################

    if [ -n "$PACKAGE_DEP_PYM" ] ; then
        step "install depentent tools via pip3"

        run pip3 --version
        run pip3 install --upgrade pip setuptools wheel
        run pip3 --version

        for item in $PACKAGE_DEP_PYM
        do
            run pip3 install "$item" --upgrade
        done
    fi

    if [ -n "$PACKAGE_DEP_PLM" ] ; then
        step "install depentent tools via cpan"

        for item in $PACKAGE_DEP_PLM
        do
            if perl -M"$item" -le 'print "installed"' > /dev/null 2>&1 ; then
                note "perl module $item has been already installed."
            else
                case $item in
                    XML::Parser)
                        # https://metacpan.org/release/TODDR/XML-Parser-2.46/source/Makefile.PL#L8-9
                        export EXPATLIBPATH="$expat_LIBRARY_DIR"
                        export EXPATINCPATH="$expat_INCLUDE_DIR"
                        echo EXPATLIBPATH=$EXPATLIBPATH
                        echo EXPATINCPATH=$EXPATINCPATH
                        ;;
                esac

                # Would you like to configure as much as possible automatically? [yes]
                run "printf '%s\n' 'yes' | cpan $item"
            fi
        done
    fi

    #########################################################################################

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        command -v rustup > /dev/null || {
            # https://www.rust-lang.org/tools/install
            note "${COLOR_GREEN}rustup cargo rustc${COLOR_OFF} ${COLOR_YELLOW}commands are required, but it is not found on this machine, I will install it via running shell script.${COLOR_OFF}"

            if [ -f    "$MY_HOME_DIR/tmp.d/rustup-init.sh" ] ; then
                run rm "$MY_HOME_DIR/tmp.d/rustup-init.sh" || return 1
            fi

            wfetch 'https://sh.rustup.rs' --output-path="$MY_HOME_DIR/tmp.d/rustup-init.sh" || return 1

            run bash "$MY_HOME_DIR/tmp.d/rustup-init.sh" -y || return 1

            export CARGO_HOME=$HOME/.cargo
            export PATH="$CARGO_HOME/bin:$PATH"
        }
    fi

    #########################################################################################

    if [ "$PACKAGE_PREPARE_ACTIONS" != null ] ; then
        cat > "$PACKAGE_INSTALLING_BIN_DIR/prepare.sh" <<EOF
prepare() {
$PACKAGE_PREPARE_ACTIONS
}
EOF
        . "$PACKAGE_INSTALLING_BIN_DIR/prepare.sh"
    fi

    if [ "$PACKAGE_INSTALL_ACTIONS" != null ] ; then
        cat > "$PACKAGE_INSTALLING_BIN_DIR/install.sh" <<EOF
build() {
$PACKAGE_INSTALL_ACTIONS
}
EOF
        . "$PACKAGE_INSTALLING_BIN_DIR/install.sh"
    fi

    #########################################################################################

    case $PACKAGE_SRC_TYPE in
        dir)
            if [ "$PACKAGE_SRC_PATH" = '/dev/null' ] ; then
                :
            elif [ -d "$PACKAGE_SRC_PATH" ] ; then
                if [ -d "$PACKAGE_SRC_PATH/.git" ] && command -v git > /dev/null ; then
                    PACKAGE_GIT_SHA=$(cd "$PACKAGE_SRC_PATH" && git rev-parse HEAD || true)
                fi
                step "copy source files to the installing src directory"
                run cp -r "$PACKAGE_SRC_PATH/." "$PACKAGE_INSTALLING_SRC_DIR"
            else
                die "src-url point to dir is not exist."
            fi
            ;;
        git)
            if [ -z "$PACKAGE_GIT_SHA" ] ; then
                PACKAGE_GIT_SHA=$(cd "$PACKAGE_SRC_PATH" && git rev-parse HEAD)
            fi
            step "copy source files to the installing src directory"
            run cp -r "$PACKAGE_SRC_PATH/." "$PACKAGE_INSTALLING_SRC_DIR"
            ;;
        c|cxx)
            step "copy source files to the installing src directory"
            run cp    "$PACKAGE_SRC_PATH"   "$PACKAGE_INSTALLING_SRC_DIR"
            ;;
        zip)
            step "uncompressed source file to the installing src directory"
            run unzip "$PACKAGE_SRC_PATH" -d "$PACKAGE_INSTALLING_SRC_DIR"
            ;;
        tar.xz|tar.gz|tar.lz|tar.bz2)
            step "uncompressed source file to the installing src directory"
            run tar xf "$PACKAGE_SRC_PATH" -C "$PACKAGE_INSTALLING_SRC_DIR" --strip-components 1 --no-same-owner
            ;;
        *)  die "unrecognized extension : $PACKAGE_SRC_URL. the supported extensions are .zip .tar.xz .tar.gz .tar.lz .tar.bz2 .tgz .txz"
    esac

    if [ -n "$PACKAGE_FIX_TYPE" ] ; then
        case $PACKAGE_FIX_TYPE in
            patch)
                step "copy patch file to the installing fix directory"
                run cp    "$PACKAGE_FIX_PATH"   "$PACKAGE_INSTALLING_FIX_DIR"
                ;;
            zip)
                step "uncompressed patch file to the installing fix directory"
                run unzip "$PACKAGE_FIX_PATH" -d "$PACKAGE_INSTALLING_FIX_DIR"
                ;;
            tar.xz|tar.gz|tar.lz|tar.bz2)
                step "uncompressed patch file to the installing fix directory"
                run tar xf "$PACKAGE_FIX_PATH" -C "$PACKAGE_INSTALLING_FIX_DIR" --strip-components 1 --no-same-owner
                ;;
            *)  die "unrecognized fix type : $PACKAGE_FIX_TYPE. the supported fix type are zip tar.xz tar.gz tar.lz tar.bz2"
        esac
    fi

    if [ -n "$PACKAGE_RES_TYPE" ] ; then
        case $PACKAGE_RES_TYPE in
            patch)
                step "copy res file to the installing res directory"
                run cp    "$PACKAGE_RES_PATH"   "$PACKAGE_INSTALLING_RES_DIR"
                ;;
            zip)
                step "uncompressed res file to the installing res directory"
                run unzip "$PACKAGE_RES_PATH" -d "$PACKAGE_INSTALLING_RES_DIR"
                ;;
            tar.xz|tar.gz|tar.lz|tar.bz2)
                step "uncompressed res file to the installing res directory"
                run tar xf "$PACKAGE_RES_PATH" -C "$PACKAGE_INSTALLING_RES_DIR" --strip-components 1 --no-same-owner
                ;;
            *)  die "unrecognized res type : $PACKAGE_RES_TYPE. the supported res type are zip tar.xz tar.gz tar.lz tar.bz2"
        esac
    fi

    step "tree files of the installing top directory"
    run tree --dirsfirst -L 2 "$PACKAGE_INSTALLING_TOP_DIR"

    step "list files of the installing top directory"
    run ls -l "$PACKAGE_INSTALLING_TOP_DIR"

    step "list files of the installing src directory"
    run ls -l "$PACKAGE_INSTALLING_SRC_DIR"

    if [ -n "$PACKAGE_BSCRIPT" ] ; then
        step "list files of the installing build script directory"
        run ls -l "$PACKAGE_INSTALLING_BST_DIR"
    fi

    if [ "$CCACHE_ENABLED" = yes ] ; then
        ccache -s > "$PACKAGE_INSTALLING_TOP_DIR/ccache-s.txt"
    fi

    [ -n "$RECURSIVE_DEPENDENT_PACKAGES" ] && {
        step2 "create symbolic links for dependency libs"
        case $LINK_TYPE in
            static-only|static-prefered) LINK_LIBRARY_TYPE=a  ;;
            shared-only|shared-prefered) LINK_LIBRARY_TYPE=so ;;
        esac

        for DEPENDENT_PACKAGE_NAME in $RECURSIVE_DEPENDENT_PACKAGES
        do
            DEPENDENT_PACKAGE_INSTALLED_LIBRARY_DIR="$MY_INSTALLED_DIR/$DEPENDENT_PACKAGE_NAME/lib"
            if [ -d "$DEPENDENT_PACKAGE_INSTALLED_LIBRARY_DIR" ] ; then
                for item in $(find "$DEPENDENT_PACKAGE_INSTALLED_LIBRARY_DIR" -maxdepth 1 -mindepth 1 -name "lib*.$LINK_LIBRARY_TYPE" -exec basename {} \;)
                do
                    if [ -e "$PACKAGE_INSTALLING_TOP_DIR/$item" ] ; then
                        continue
                    else
                        if [ ! -e "$PACKAGE_INSTALLING_LIB_DIR/$item" ] ; then
                            run ln -s "$DEPENDENT_PACKAGE_INSTALLED_LIBRARY_DIR/$item" "$PACKAGE_INSTALLING_LIB_DIR/$item"
                        fi
                    fi
                done
            fi
        done

        unset LINK_LIBRARY_TYPE
    }

    step "do some preparation works"
    if [ "$PWD" != "$PACKAGE_INSTALLING_BST_DIR" ] ; then
        run cd "$PACKAGE_INSTALLING_BST_DIR"
    fi
    if command -v prepare > /dev/null ; then
        prepare "$1"
    else
        case $PACKAGE_BUILD_SYSTEM in
            autogen)
                warn "no prepare function defined in formula."
                run NOCONFIGURE=yes ./autogen.sh    || return 1
                ;;
            autotools)
                warn "no prepare function defined in formula."
                run autoreconf -ivf || return 1
                ;;
            *)  warn "no prepare function defined in formula, skipped."
        esac
    fi

    step "create symbolic link for CC and CXX to use ccache"
    if [ "$CCACHE_ENABLED" = yes ] ; then
        if [ -z "$CCACHE" ] ; then
            die "ccache is not installed."
        fi
        run ln -sf "$CCACHE" "$PACKAGE_INSTALLING_BIN_DIR/$(basename "$CC")"
        run ln -sf "$CCACHE" "$PACKAGE_INSTALLING_BIN_DIR/$(basename "$CXX")"
    else
        note "ccache is disabled, skipped."
    fi

    # run ln -sf "$CC" "$PACKAGE_INSTALLING_BIN_DIR/cc"
    # run ln -sf "$LD" "$PACKAGE_INSTALLING_BIN_DIR/ld"

    if [ "$DRYRUN" = yes ] ; then
        if [ -z "$SHELL" ] ; then
            SHELL=$(command -v zsh || command -v bash || command -v sh)
        fi
        exec "$SHELL" || return 1
    fi

    if [ -d "$PACKAGE_INSTALL_DIR" ] ; then
        run rm -rf "$PACKAGE_INSTALL_DIR" || return 1
    fi

    step "building"

    if [ "$PACKAGE_BUILD_IN_BSCRIPT_DIR" = yes ] ; then
        if [ "$PWD" != "$PACKAGE_INSTALLING_BST_DIR" ] ; then
            run cd "$PACKAGE_INSTALLING_BST_DIR" || return 1
        fi
    else
            run cd "$PACKAGE_INSTALLING_TMP_DIR" || return 1
    fi

    if command -v build > /dev/null ; then
        build $1
    else
        case $PACKAGE_BUILD_SYSTEM in
            autogen)   configure ;;
            autotools) configure ;;
            configure) configure ;;
            cmake*)    cmakew ;;
            meson)     mesonw ;;
            ninja)     ninjaw clean && ninjaw && ninjaw install ;;
            gmake)     gmakew clean && gmakew && gmakew install ;;
            cargo)     cargow install ;;
            go)        gow ;;
        esac
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        [ -f "$PACKAGE_INSTALL_DIR/.crates.toml"  ] && rm "$PACKAGE_INSTALL_DIR/.crates.toml"
        [ -f "$PACKAGE_INSTALL_DIR/.crates2.json" ] && rm "$PACKAGE_INSTALL_DIR/.crates2.json"
    fi

    cd "$PACKAGE_INSTALL_DIR" || die "nothing is installed."

    [ -z "$(ls)" ]            && die "nothing is installed."

    install -d "$PACKAGE_METAINF_DIR"

    step "install config.log"
    for dir in "$PACKAGE_INSTALLING_TMP_DIR" "$PACKAGE_INSTALLING_BST_DIR"
    do
        if [ -f "$dir/config.log" ] ; then
            install -v -m 644 "$dir/config.log" "$PACKAGE_METAINF_DIR"
        fi
    done

    step "install compile_commands.json"
    for dir in "$PACKAGE_INSTALLING_TMP_DIR" "$PACKAGE_INSTALLING_BST_DIR"
    do
        if [ -f "$dir/compile_commands.json" ] ; then
            install -v -m 644 "$dir/compile_commands.json" "$PACKAGE_METAINF_DIR"
        fi
    done

    step "install dependencies.dot and dependencies.txt"
    for file in $PACKAGE_DEPENDENCY_GRAPH_FILEPATH_DOT $PACKAGE_DEPENDENCY_GRAPH_FILEPATH_TXT
    do
        if [ -f "$file" ] ; then
            install -v -m 644 "$file" "$PACKAGE_METAINF_DIR"
        fi
    done

    if [ "$NATIVE_OS_KIND" = darwin ] ; then
        step "adjust Mach-O files for ${COLOR_GREEN}$@${COLOR_OFF}"
        __adjust_mach_o_files_for_the_given_target $@
    else
        step "adjust ELF files for ${COLOR_GREEN}$@${COLOR_OFF}"
        __adjust_elf_files_for_the_given_target $@
    fi

    if [ -d "$PACKAGE_INSTALL_DIR/lib" ] ; then
        step "adjust .la files for ${COLOR_GREEN}$@${COLOR_OFF}"
        __adjust_la_files_for_the_given_target $@

        step "adjust .pc files for ${COLOR_GREEN}$@${COLOR_OFF}"
        __adjust_pc_files_for_the_given_target $@
    fi

    step "generate buildon.yml"
    cat > "$PACKAGE_METAINF_DIR/buildon.yml" <<EOF
os-kind: $NATIVE_OS_KIND
os-type: $NATIVE_OS_TYPE
os-name: $NATIVE_OS_NAME
os-arch: $NATIVE_OS_ARCH
os-vers: $NATIVE_OS_VERS
os-ncpu: $NATIVE_OS_NCPU
os-libc: $NATIVE_OS_LIBC
EOF

    step "generate manifest.txt"
    __generate_installed_manifest_of_the_given_package "$1"

    step "generate receipt.yml"
    __generate_receipt_of_the_given_package "$1"

    if [ "$PACKAGE_SYMLINK" = yes ] ; then
        step "symlink installed files to $MY_SYMLINKED_DIR"
        __symlink_installed_files_of_the_given_package "$1"
    fi

    if [ "$CCACHE_ENABLED" = yes ] ; then
        step "show ccache statistics summary"
        note "Before Build:"
        run  cat "$PACKAGE_INSTALLING_TOP_DIR/ccache-s.txt"
        note "After  Build:"
        run  ccache -s
    fi

    if [ "$KEEP_INSTALLING_DIR" != yes ] ; then
        step "delete the installing directory"
        run rm -rf "$PACKAGE_INSTALLING_TOP_DIR"
    fi

    step "show installed files in tree-like format"
    __tree_the_given_installed_package "$1" $TREE_ARGS

    echo
    success "$1 have been installed successfully."
}

main "$@"
